{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?34ab","webpack:///src/App.vue","webpack:///./src/App.vue?1160","webpack:///./src/App.vue","webpack:///./src/store/dataManage/actions.js","webpack:///./src/store/dataManage/state.js","webpack:///./src/store/dataManage/mutations.js","webpack:///./src/store/dataManage/getters.js","webpack:///./src/store/dataManage/index.js","webpack:///./src/store/sudoku/actions.js","webpack:///./src/store/sudoku/state.js","webpack:///./src/store/sudoku/sudoku.js","webpack:///./src/store/sudoku/mutations.js","webpack:///./src/store/sudoku/getters.js","webpack:///./src/store/sudoku/index.js","webpack:///./src/store/index.js","webpack:///./src/registerServiceWorker.js","webpack:///./src/main.js","webpack:///./src/App.vue?c650","webpack:///./src/router/index.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","installedCssChunks","jsonpScriptSrc","p","exports","module","l","e","promises","cssChunks","Promise","resolve","reject","href","fullhref","existingLinkTags","document","getElementsByTagName","tag","dataHref","getAttribute","rel","existingStyleTags","linkTag","createElement","type","onload","onerror","event","request","target","src","err","Error","code","parentNode","removeChild","head","appendChild","then","installedChunkData","promise","onScriptComplete","script","charset","timeout","nc","setAttribute","error","clearTimeout","chunk","errorType","realSrc","message","name","undefined","setTimeout","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","console","jsonpArray","window","oldJsonpFunction","slice","_vm","this","_h","$createElement","_c","_self","attrs","staticRenderFns","methods","created","init","component","api","context","state","token","dispatch","catch","solveField","commit","solved","signUp","email","password","axios","post","response","signIn","user","check","headers","log","logOut","finally","update","put","solveSudoku","fields","pullData","url","pullLeaderBoard","ignored","JSON","parse","localStorage","getItem","SET_TOKEN","setItem","LOG_OUT","removeItem","SET_FIELDS","payload","stringify","IGNORE_FIELD","difficulty","SOLVE_FIELD","id","solution","index","findIndex","item","SOLVE_CLEAN","CHECK_SUCCESS","field","getUser","getToken","namespaced","mutations","getters","actions","initialization","rootGetters","selectedStringField","initializationString","str","newField","savePersonalData","autoResolution","savedData","autoresolution","onlePossiblySwitch","onlyHereSwitch","allPossubly","onePossubly","haspossibly","possibly","size","forEach","fieldPossubly","stringField","Set","setFieldValue","has","undoLastValue","moveHistory","local","pop","exvalue","buttonid","unsave","advanchedPossibly","possiblyApdated","sudokuSquares","sudokuSolve","repeat","option","possiblyends","param","segments","parametr","a","cycleInint","clear","segmentsSeparate","selectedrow","selectedcolumn","square","existValue","onlyHere","onePossiblyDelete","segment","segmentPossibly","add","item2","delete","possiblyes","subitem","filter","indexOf","lastIndexOf","number","elem","x","stringfield","checkWinPossibly","fieldInit","setAdvanchedPossibly","Bulkhead","possiblyend","checkLose","string","find","litle","q1","q2","item1","button","count","succes","place","Math","floor","random","sudokuSolution","SET_PERSONAL_DATA","NEW_FIELD","INITIALIZATION","ONE_POSSIBLY_SWITCH","ONLY_HERE_SWITCH","POSSIBLY_APDATE","AUTO_RESOLUTIONS","EXIST_VALUE","SET_FIELD_VALUE","CYCLE_INIT","ALL_POSSIBLY","Vue","use","Vuex","Store","dataManage","sudoku","register","process","ready","registered","cached","updatefound","updated","location","reload","offline","config","productionTip","router","store","render","h","App","$mount","VueRouter","routes","path","base"],"mappings":"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","file":"js/app.07a67c05.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded CSS chunks\n \tvar installedCssChunks = {\n \t\t\"app\": 0\n \t}\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"js/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-19a19c2c\":\"896ae298\",\"chunk-23ca93f1\":\"7aafa10b\",\"chunk-2a8b24d2\":\"782498ea\",\"chunk-44002a52\":\"a2ec2709\",\"chunk-55df9ff3\":\"42114c74\"}[chunkId] + \".js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// mini-css-extract-plugin CSS loading\n \t\tvar cssChunks = {\"chunk-19a19c2c\":1,\"chunk-23ca93f1\":1,\"chunk-2a8b24d2\":1,\"chunk-44002a52\":1,\"chunk-55df9ff3\":1};\n \t\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n \t\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n \t\t\tpromises.push(installedCssChunks[chunkId] = new Promise(function(resolve, reject) {\n \t\t\t\tvar href = \"css/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-19a19c2c\":\"cae811ee\",\"chunk-23ca93f1\":\"48084ff2\",\"chunk-2a8b24d2\":\"3d5d1b26\",\"chunk-44002a52\":\"b6541d7e\",\"chunk-55df9ff3\":\"834eb4e3\"}[chunkId] + \".css\";\n \t\t\t\tvar fullhref = __webpack_require__.p + href;\n \t\t\t\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n \t\t\t\tfor(var i = 0; i < existingLinkTags.length; i++) {\n \t\t\t\t\tvar tag = existingLinkTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n \t\t\t\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return resolve();\n \t\t\t\t}\n \t\t\t\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n \t\t\t\tfor(var i = 0; i < existingStyleTags.length; i++) {\n \t\t\t\t\tvar tag = existingStyleTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\");\n \t\t\t\t\tif(dataHref === href || dataHref === fullhref) return resolve();\n \t\t\t\t}\n \t\t\t\tvar linkTag = document.createElement(\"link\");\n \t\t\t\tlinkTag.rel = \"stylesheet\";\n \t\t\t\tlinkTag.type = \"text/css\";\n \t\t\t\tlinkTag.onload = resolve;\n \t\t\t\tlinkTag.onerror = function(event) {\n \t\t\t\t\tvar request = event && event.target && event.target.src || fullhref;\n \t\t\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + request + \")\");\n \t\t\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n \t\t\t\t\terr.request = request;\n \t\t\t\t\tdelete installedCssChunks[chunkId]\n \t\t\t\t\tlinkTag.parentNode.removeChild(linkTag)\n \t\t\t\t\treject(err);\n \t\t\t\t};\n \t\t\t\tlinkTag.href = fullhref;\n\n \t\t\t\tvar head = document.getElementsByTagName(\"head\")[0];\n \t\t\t\thead.appendChild(linkTag);\n \t\t\t}).then(function() {\n \t\t\t\tinstalledCssChunks[chunkId] = 0;\n \t\t\t}));\n \t\t}\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/Sudoku/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('keep-alive',[_c('router-view')],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div id=\"app\">\n    <keep-alive>\n      <router-view/>\n    </keep-alive>\n  </div>\n</template>\n\n<script>\n\n\nimport {mapActions} from \"vuex\";\n\nexport default {\nname: 'App',\n  methods: {\n    ...mapActions({\n      init: 'dataManage/init',\n    }),\n  },\n  created() {\n    this.init()\n  }\n}\n</script>\n<style lang=\"scss\">\nbody {\n  margin: 0;\n\n}\n\n.mainColor {\n  background-color: #E2E3FB ;\n\n}\n.secondColor {\n  background-color: #FDE0B0 !important;\n}\n\n.primaryColor{\n  background-color: #434691 !important;\n  color: white;\n}\n</style>\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=352b30ca&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import axios from 'axios'\n\nconst api = 'https://sudokueasy.herokuapp.com/api/'\n// const api = 'http://0.0.0.0/'\n\nexport default {\n    init(context) {\n        if(context.state.token) {\n            context.dispatch('check').then(()=>{\n                context.dispatch('solveSudoku').then(()=>{\n                    context.dispatch('pullData').then(()=>{\n                    })\n                })\n            }).catch(()=>{\n                context.dispatch('pullData')\n            })\n        } else {\n            context.dispatch('pullData')\n        }\n    },\n    solveField(context,data){\n        context.commit('SOLVE_FIELD',data)\n        if (context.state.token && context.state.solved.length>25) {\n            context.dispatch('solveSudoku').then(()=>{\n                context.dispatch('pullData').then(()=>{\n                })\n            })\n        }\n        if (!context.state.token && context.state.solved.length%25 ===0) {\n                context.dispatch('pullData').then(()=>{\n                })\n        }\n    },\n    signUp(context,[name,email,password] ) {\n        return new Promise((resolve, reject) => {\n            axios.post(api + 'auth/signup', {\n                name: name,\n                email: email,\n                password: password\n            })\n                .then(response => {\n                    resolve(response)\n                })\n                .catch(error => {\n                    reject(error)\n                })\n        })\n    },\n    signIn({commit},[email,password]) {\n        return new Promise((resolve, reject) => {\n            axios.post(api + 'auth/signin', {\n                email: email,\n                password: password\n            })\n                .then(response => {\n                    commit('SET_TOKEN', response.data.token)\n                    commit('CHECK_SUCCESS', response.data.user)\n                    resolve(response)\n                })\n                .catch(error => {\n                    reject(error)\n                })\n        })\n    },\n    check({state,commit}) {\n        return new Promise((resolve, reject) => {\n            axios.get(api + 'auth/check', {\n                headers: {\n                    'Authorization': \"Bearer \" + state.token\n                }\n            })\n                .then(response => {\n                    commit('CHECK_SUCCESS', response.data.data)\n                    resolve(response)\n                })\n                .catch(error => {\n                    console.log(error)\n                    commit('LOG_OUT')\n                    reject(error)\n                })\n        })\n    },\n    logOut({state, commit}) {\n        return new Promise((resolve, reject) => {\n            axios.get(api + 'auth/logout', {\n                headers: {\n                    'Authorization': \"Bearer \" + state.token\n                }\n            })\n                .then(response => {\n                    resolve(response)\n                })\n                .catch(error => {\n                    reject(error)\n                }).finally(()=>{\n                commit('LOG_OUT')\n            })\n        })\n    },\n    update({commit},data) {\n        return new Promise((resolve, reject) => {\n            axios.put(api + 'user/6',{name:data.name,email:data.email})\n                .then(response => {\n                    commit('CHECK_SUCCESS', response.data.data)\n                    resolve(response)\n                })\n                .catch(error => {\n                    reject(error)\n                })\n        })\n    },\n    solveSudoku({state, commit}) {\n        return new Promise((resolve, reject) => {\n            axios.post(api + 'sudoku/solve', {\n                fields: state.solved\n            }, {\n                headers: {\n                    'Authorization': \"Bearer \" + state.token\n                }\n            })\n                .then(response => {\n                    commit('SOLVE_CLEAN')\n                    resolve(response)\n                })\n                .catch(error => {\n                    reject(error)\n                })\n        })\n    },\n    pullData({commit,state}) {\n        return new Promise((resolve, reject) => {\n            let url = state.user? '?userEmail=' + state.user.email: ''\n            axios.get(api + 'sudoku/index'+url )\n                .then(response => {\n                    commit('SET_FIELDS', response.data.data)\n                    resolve(response)\n                })\n                .catch(error => {\n                    reject(error)\n                })\n        })\n    },\n    pullLeaderBoard() {\n        return new Promise((resolve, reject) => {\n            axios.get(api + 'users/ranking' )\n                .then(response => {\n                    resolve(response.data)\n                })\n                .catch(error => {\n                    reject(error)\n                })\n        })\n    },\n}\n","export default {\n    ignored:JSON.parse(localStorage.getItem('ignored')) || [],\n    solved:JSON.parse(localStorage.getItem('solved')) || [],\n    token: localStorage.getItem('token') || null,\n    user: JSON.parse(localStorage.getItem('user')) || null,\n    fields: JSON.parse(localStorage.getItem('fields')) || JSON.parse('[[{\"id\":3527,\"field\":\"600500000005000001000080200001000000023001000000000004400000000000000050080072060\",\"difficulty\":0},{\"id\":3450,\"field\":\"000190800004000000205000000000000003006800070010000002000000000000002001003050004\",\"difficulty\":0},{\"id\":3234,\"field\":\"000007600003004000094000000000000040050030000600890700000001000000020000001000003\",\"difficulty\":0},{\"id\":3364,\"field\":\"050000670000002000008041000000000001000000020003000004091000700000060000700200000\",\"difficulty\":0},{\"id\":3500,\"field\":\"001000000023000001000004000400000000000050000080060072600000500005001000000200080\",\"difficulty\":0},{\"id\":3331,\"field\":\"000003000006070800010002000000800170004000000205000000000000000000001002003004050\",\"difficulty\":0},{\"id\":3188,\"field\":\"005000000000000006000700038800000047000005080000201000000000000002000001050034000\",\"difficulty\":0},{\"id\":3271,\"field\":\"000600900010000000320000007000000001000000023000004000000010000005000600470028000\",\"difficulty\":0},{\"id\":3217,\"field\":\"000040000050000030600700890000000001000000020001003000000600007003000004094000000\",\"difficulty\":0},{\"id\":3228,\"field\":\"000000040050030000600890700000007600003004000094000000000001000000020000001000003\",\"difficulty\":0},{\"id\":3225,\"field\":\"040000000000030050700890600600007000000004003000000094000001000000020000003000001\",\"difficulty\":0},{\"id\":3316,\"field\":\"000000000001000002004003050800000170000004000000205000003000000070006800002010000\",\"difficulty\":0},{\"id\":3342,\"field\":\"000170800004000000205000000000000003006800070010000002000000000000002001003050004\",\"difficulty\":0},{\"id\":3445,\"field\":\"000800190004000000205000000000003000006070800010002000000000000000001002003004050\",\"difficulty\":0},{\"id\":3330,\"field\":\"000000003006800070010000002000000000000002001003050004000170800004000000205000000\",\"difficulty\":0},{\"id\":3274,\"field\":\"600000900000010000000320007000000001000000023004000000010000000000005600028470000\",\"difficulty\":0},{\"id\":3189,\"field\":\"000005000006000000038000700047800000080000005000000201000000000001002000000050034\",\"difficulty\":0},{\"id\":3181,\"field\":\"000000005000006000700038000000000000000001002034000050000047800005080000201000000\",\"difficulty\":0},{\"id\":3552,\"field\":\"000500003061000000270000000000060200000010300040008000000001000000020000003000045\",\"difficulty\":0},{\"id\":3328,\"field\":\"003000000070006800002010000000000000001000002004003050800000170000004000000205000\",\"difficulty\":0},{\"id\":3444,\"field\":\"000000003006800070010000002000190800004000000205000000000000000000002001003050004\",\"difficulty\":0},{\"id\":3249,\"field\":\"000001000000023000004000000010000000000600005028000470600900000000000010000007320\",\"difficulty\":0},{\"id\":3282,\"field\":\"000001000000020000003000004000300020080009600500000000000006005002000010037400000\",\"difficulty\":0},{\"id\":3275,\"field\":\"900600000000000010007000320001000000023000000000004000000010000600000005000028470\",\"difficulty\":0},{\"id\":3436,\"field\":\"003000000070006800002010000000000000001000002004003050800000190000004000000205000\",\"difficulty\":0},{\"id\":3387,\"field\":\"000001000000020000045000003700040000200300008000000500006007000100000020000005400\",\"difficulty\":0},{\"id\":3345,\"field\":\"800170000000000004000000205000000000001002000004050003003000000070800006002000010\",\"difficulty\":0},{\"id\":3502,\"field\":\"000000001001000023000004000000000400000050000072060080500000600000001005080200000\",\"difficulty\":0},{\"id\":3505,\"field\":\"000000400050000000060072080000000001000001023004000000000500600001000005200080000\",\"difficulty\":0},{\"id\":3538,\"field\":\"000000001000000020045003000003000500000061000000270000200000060300000010000040008\",\"difficulty\":0},{\"id\":3453,\"field\":\"800190000000000004000000205000000000001002000004050003003000000070800006002000010\",\"difficulty\":0},{\"id\":3289,\"field\":\"000005006002010000037000400000000001000000020003004000000020300080600009500000000\",\"difficulty\":0},{\"id\":3555,\"field\":\"200060000300010000000008040003500000000000061000000270000001000000020000045000003\",\"difficulty\":0},{\"id\":3244,\"field\":\"000000001000000023004000000600000900000010000000320007010000000000005600028470000\",\"difficulty\":0},{\"id\":3335,\"field\":\"000003000800070006000002010170800000000000004000000205000000000002001000050004003\",\"difficulty\":0},{\"id\":3402,\"field\":\"000007006020000100400005000000001000000020000003000045000040700008300200500000000\",\"difficulty\":0},{\"id\":3296,\"field\":\"006000005000002010400037000300000020009080600000500000001000000020000000000003004\",\"difficulty\":0},{\"id\":3205,\"field\":\"000000001000000020001003000000600007003000004094000000000040000050000030600700890\",\"difficulty\":0},{\"id\":3558,\"field\":\"000060200000010300040008000000500003061000000270000000000001000000020000003000045\",\"difficulty\":0},{\"id\":3306,\"field\":\"000300020080009600500000000000006005002000010037400000000001000000020000003000004\",\"difficulty\":0},{\"id\":3304,\"field\":\"020000300600080009000500000005000006010002000000037400000000001000000020004003000\",\"difficulty\":0},{\"id\":3204,\"field\":\"000800047005000080201000000000000000000002001034050000000005000000000006700000038\",\"difficulty\":0},{\"id\":3239,\"field\":\"007600000004000003000000094001000000020000000000003001000040000030000050890700600\",\"difficulty\":0},{\"id\":3336,\"field\":\"000000003006800070010000002000170800004000000205000000000000000000002001003050004\",\"difficulty\":0},{\"id\":3254,\"field\":\"000000010600005000000470028001000000023000000000000004900000600000010000007320000\",\"difficulty\":0},{\"id\":3394,\"field\":\"000000001000000020045003000006000007100020000000400005700000040200008300000500000\",\"difficulty\":0},{\"id\":3457,\"field\":\"000000001000000023004005000000400000060010000208000500000000060000030200037100000\",\"difficulty\":0},{\"id\":3423,\"field\":\"000000000001002000004050003800190000000000004000000205003000000070800006002000010\",\"difficulty\":0},{\"id\":3511,\"field\":\"000000400050000000060072080000500600001000005200080000000000001000001023004000000\",\"difficulty\":0},{\"id\":3431,\"field\":\"000000000002001000050004003000003000800070006000002010190800000000000004000000205\",\"difficulty\":0},{\"id\":3449,\"field\":\"190800000000000004000000205000003000800070006000002010000000000002001000050004003\",\"difficulty\":0},{\"id\":3206,\"field\":\"001000000020000000000001003007000600004003000000094000000000040030050000890600700\",\"difficulty\":0},{\"id\":3482,\"field\":\"000000400000060010500208000060000000200000030000037100001000000023000000000004005\",\"difficulty\":0},{\"id\":3302,\"field\":\"300000020009080600000500000006000005000002010400037000001000000020000000000003004\",\"difficulty\":0},{\"id\":3238,\"field\":\"600000007000003004000094000000000001000000020003001000040000000000050030700600890\",\"difficulty\":0},{\"id\":3313,\"field\":\"000000000000001002003004050000800170004000000205000000000003000006070800010002000\",\"difficulty\":0},{\"id\":3307,\"field\":\"000020300080600009500000000000000001000000020003004000000005006002010000037000400\",\"difficulty\":0},{\"id\":3484,\"field\":\"400000000010060000000208500000000060030000200100037000000000001000000023005004000\",\"difficulty\":0},{\"id\":3362,\"field\":\"670000050000002000000041008001000000020000000004000003700000091000060000000200700\",\"difficulty\":0},{\"id\":3312,\"field\":\"000300020080009600500000000000001000000020000003000004000006005002000010037400000\",\"difficulty\":0},{\"id\":3287,\"field\":\"001000000020000000000004003006005000000010002400000037300020000009600080000000500\",\"difficulty\":0},{\"id\":3179,\"field\":\"000000000002001000050000034005000000000006000000038700800047000000080005000000201\",\"difficulty\":0},{\"id\":3195,\"field\":\"047800000080000005000000201000005000006000000038000700000000000001002000000050034\",\"difficulty\":0},{\"id\":3319,\"field\":\"000000000000001002003004050000003000006070800010002000000800170004000000205000000\",\"difficulty\":0},{\"id\":3401,\"field\":\"007006000000100020005000400001000000020000000000045003040700000300200008000000500\",\"difficulty\":0},{\"id\":3385,\"field\":\"000000001000000020003045000000700040008200300500000000000006007020100000400000005\",\"difficulty\":0},{\"id\":3469,\"field\":\"000000060000030200037100000000000001000000023004005000000400000060010000208000500\",\"difficulty\":0},{\"id\":3360,\"field\":\"000001000000020000000004003000670050002000000041000008000700091060000000200000700\",\"difficulty\":0},{\"id\":3541,\"field\":\"000003500061000000270000000000000001000000020003045000000200060000300010040000008\",\"difficulty\":0},{\"id\":3215,\"field\":\"001000000020000000000003001000040000030000050890700600007600000004000003000000094\",\"difficulty\":0},{\"id\":3377,\"field\":\"700091000000000060000700200670050000000000002000008041001000000020000000004003000\",\"difficulty\":0},{\"id\":3384,\"field\":\"000700091060000000200000700000001000000020000000004003000670050002000000041000008\",\"difficulty\":0},{\"id\":3184,\"field\":\"000000005006000000038700000000000000001000002000034050047000800080005000000201000\",\"difficulty\":0},{\"id\":3395,\"field\":\"001000000020000000000045003007006000000100020005000400040700000300200008000000500\",\"difficulty\":0},{\"id\":3448,\"field\":\"800000190000004000000205000003000000070006800002010000000000000001000002004003050\",\"difficulty\":0},{\"id\":3337,\"field\":\"000800170004000000205000000000003000006070800010002000000000000000001002003004050\",\"difficulty\":0},{\"id\":3216,\"field\":\"000001000000020000001000003000000040050030000600890700000007600003004000094000000\",\"difficulty\":0},{\"id\":3396,\"field\":\"000001000000020000003000045000007006020000100400005000000040700008300200500000000\",\"difficulty\":0},{\"id\":3194,\"field\":\"800000047000005080000201000005000000000000006000700038000000000002000001050034000\",\"difficulty\":0},{\"id\":3251,\"field\":\"001000000023000000000004000000010000600000005000028470900600000000000010007000320\",\"difficulty\":0},{\"id\":3378,\"field\":\"000700091060000000200000700000670050002000000041000008000001000000020000000004003\",\"difficulty\":0},{\"id\":3437,\"field\":\"000003000800070006000002010000000000002001000050004003190800000000000004000000205\",\"difficulty\":0},{\"id\":3459,\"field\":\"000001000000023000005000004400000000010000060000500208000060000030200000100000037\",\"difficulty\":0},{\"id\":3374,\"field\":\"700000091000060000000200700670000050000002000000041008001000000020000000004000003\",\"difficulty\":0},{\"id\":3494,\"field\":\"001000000023000001000004000600000500005001000000200080400000000000050000080060072\",\"difficulty\":0},{\"id\":3293,\"field\":\"006005000000010002400000037001000000020000000000004003300020000009600080000000500\",\"difficulty\":0},{\"id\":3198,\"field\":\"000800047005000080201000000000005000000000006700000038000000000000002001034050000\",\"difficulty\":0},{\"id\":3542,\"field\":\"500000003000061000000270000001000000020000000000003045060000200010000300008040000\",\"difficulty\":0},{\"id\":3236,\"field\":\"007000600004003000000094000001000000020000000000001003000000040030050000890600700\",\"difficulty\":0},{\"id\":3418,\"field\":\"700000040200008300000500000000000001000000020045003000006000007100020000000400005\",\"difficulty\":0},{\"id\":3356,\"field\":\"001000000020000000004000003670000050000002000000041008700000091000060000000200700\",\"difficulty\":0},{\"id\":3501,\"field\":\"000001000001023000000000004000400000000000050072080060500600000000005001080000200\",\"difficulty\":0},{\"id\":3192,\"field\":\"000005000000000006700000038000800047005000080201000000000000000000002001034050000\",\"difficulty\":0},{\"id\":3170,\"field\":\"000000000002000001050034000800000047000005080000201000005000000000000006000700038\",\"difficulty\":0},{\"id\":3557,\"field\":\"060200000010300000008000040500003000000000061000000270001000000020000000000045003\",\"difficulty\":0},{\"id\":3291,\"field\":\"005006000010000002000400037000001000000020000004000003020300000600009080000000500\",\"difficulty\":0},{\"id\":3290,\"field\":\"006000005000002010400037000001000000020000000000003004300000020009080600000500000\",\"difficulty\":0},{\"id\":3454,\"field\":\"800000190000004000000205000000000000001000002004003050003000000070006800002010000\",\"difficulty\":0},{\"id\":3412,\"field\":\"700000040200008300000500000006000007100020000000400005000000001000000020045003000\",\"difficulty\":0},{\"id\":3190,\"field\":\"000000005006000000038700000047000800080005000000201000000000000001000002000034050\",\"difficulty\":0}],[{\"id\":2967,\"field\":\"000010000050006020700000300000000000001002000034000001008000000000030005200000069\",\"difficulty\":1},{\"id\":2200,\"field\":\"000000000000000012034000000100000070000040000008350900005000300200001060000006000\",\"difficulty\":1},{\"id\":2221,\"field\":\"000100070040000000350008900000005300001200060006000000000000000000000012000034000\",\"difficulty\":1},{\"id\":2981,\"field\":\"000008000030000005000200069010000000006050020000700300000000000002001000000034001\",\"difficulty\":1},{\"id\":1252,\"field\":\"720000000000060500000840300005000460000001000003007000000000001000000002034000000\",\"difficulty\":1},{\"id\":2357,\"field\":\"000000000100006000030080075000000000002001000050004003000000000080570000200000160\",\"difficulty\":1},{\"id\":1562,\"field\":\"060000200000003001780060000000000000001000000005002034070000600000000800000401000\",\"difficulty\":1},{\"id\":441,\"field\":\"000000000000012000045000003000000000100006000003800074000500000280000100700000600\",\"difficulty\":1},{\"id\":457,\"field\":\"000000500100280000600700000000000000000100006074003800000000000000000012003045000\",\"difficulty\":1},{\"id\":24,\"field\":\"000060003010400000570000000000000070000007210400800000000000000000012000003005004\",\"difficulty\":1},{\"id\":1038,\"field\":\"070000000080006200400000050000040000000130500060000700000000000000002001001000034\",\"difficulty\":1},{\"id\":1238,\"field\":\"460000005000001000000007003001000000002000000000000034000000720500060000300840000\",\"difficulty\":1},{\"id\":22,\"field\":\"003000060000010400000570000070000000210000007000400800000000000000000012004003005\",\"difficulty\":1},{\"id\":1583,\"field\":\"070600000000800000000000401000000000001000000005034002060200000000001003780000060\",\"difficulty\":1},{\"id\":2090,\"field\":\"001000000003000002000002004600000800040200000000530000002000050000006000080070100\",\"difficulty\":1},{\"id\":3164,\"field\":\"080000100000070000000200050001000000000000002040001030205000000003006007000089000\",\"difficulty\":1},{\"id\":1256,\"field\":\"000000720500060000300840000001000000002000000000000034460000005000001000000007003\",\"difficulty\":1},{\"id\":1021,\"field\":\"000000040000500130060700000000000000000001002001034000070000000080200006400050000\",\"difficulty\":1},{\"id\":1025,\"field\":\"040000000130500000000700060000000000002001000000034001000000070006200080000050400\",\"difficulty\":1},{\"id\":2362,\"field\":\"000000000006000100080075030000000000570000080000160200000000000001000002004003050\",\"difficulty\":1},{\"id\":475,\"field\":\"000000001000002003004050000000000060030710000050000020000300400002000000506008000\",\"difficulty\":1},{\"id\":3137,\"field\":\"001000000000002000040030001080100000000000070000050200205000000003007006000000089\",\"difficulty\":1},{\"id\":2376,\"field\":\"000000000000080570160200000000000000000002001003050004000000000000100006075030080\",\"difficulty\":1},{\"id\":2114,\"field\":\"600000800040200000000530000002000050000006000080070100001000000003000002000002004\",\"difficulty\":1},{\"id\":2208,\"field\":\"000000000000012000000000034000300005001060200006000000000070100040000000350900008\",\"difficulty\":1},{\"id\":452,\"field\":\"000000000006000100800074003500000000000100280000600700000000000012000000000003045\",\"difficulty\":1},{\"id\":2860,\"field\":\"000000500006000007000014000000000000000000012034000000048000300010070000000520006\",\"difficulty\":1},{\"id\":2858,\"field\":\"500000000007000006000014000000000000012000000000000034300000048000070010006520000\",\"difficulty\":1},{\"id\":3157,\"field\":\"000100080070000000200050000000000205006007003089000000000000001000002000001030040\",\"difficulty\":1},{\"id\":18,\"field\":\"000060003010400000570000000000000000000012000003005004000000070000007210400800000\",\"difficulty\":1},{\"id\":2810,\"field\":\"000000000012000000000003004304009005000100000000760000005000000000000060080020710\",\"difficulty\":1},{\"id\":810,\"field\":\"000040000000130500060000700000000000000002001001000034080000000090006200400000050\",\"difficulty\":1},{\"id\":2123,\"field\":\"600800000040000200000000530001000000003002000000004002002050000000000006080100070\",\"difficulty\":1},{\"id\":2851,\"field\":\"000000000000000012000034000000000500000006007014000000000048300070010000520000006\",\"difficulty\":1},{\"id\":1234,\"field\":\"000000001000000002034000000005000460000001000003007000720000000000060500000840300\",\"difficulty\":1},{\"id\":826,\"field\":\"000080000200090006050400000000000000001000002034001000000000040500000130700060000\",\"difficulty\":1},{\"id\":3148,\"field\":\"000000205007006003000089000000000001002000000030001040100000080000070000050200000\",\"difficulty\":1},{\"id\":2834,\"field\":\"304009005000100000000760000005000000000000060080020710000000000012000000000003004\",\"difficulty\":1},{\"id\":1040,\"field\":\"000070000006080200000400050000000000002000001000001034040000000130000500000060700\",\"difficulty\":1},{\"id\":3168,\"field\":\"000080100070000000200000050000001000000000002001040030000205000006003007089000000\",\"difficulty\":1},{\"id\":27,\"field\":\"070000000210007000000800400003060000000400010000000570000000000000012000004005003\",\"difficulty\":1},{\"id\":446,\"field\":\"000000000006000100800074003000000000012000000000003045500000000000100280000600700\",\"difficulty\":1},{\"id\":3160,\"field\":\"100000080000070000050200000000000205007006003000089000000000001002000000030001040\",\"difficulty\":1},{\"id\":809,\"field\":\"040000000130500000000700060000000000002001000000034001000000080006200090000050400\",\"difficulty\":1},{\"id\":476,\"field\":\"001000000003000002000004050060000000000030710020050000400000300000002000000506008\",\"difficulty\":1},{\"id\":2209,\"field\":\"000005300001200060006000000000000000000000012000034000000100070040000000350008900\",\"difficulty\":1},{\"id\":1582,\"field\":\"600000070800000000000401000000000000000000001034002005200000060001003000000060780\",\"difficulty\":1},{\"id\":1014,\"field\":\"000000000000002001001000034070000000080006200400000050000040000000130500060000700\",\"difficulty\":1},{\"id\":2836,\"field\":\"005009304000100000000760000000000005060000000710020080000000000000000012004003000\",\"difficulty\":1},{\"id\":2814,\"field\":\"000000000000012000003000004009304005100000000760000000000005000000000060020080710\",\"difficulty\":1},{\"id\":2827,\"field\":\"000000005000060000020710080009005304100000000760000000000000000000000012003004000\",\"difficulty\":1},{\"id\":1030,\"field\":\"000000040500000130700060000000070000200080006050400000000000000001000002034001000\",\"difficulty\":1},{\"id\":36,\"field\":\"000000070000007210400800000000000000000012000003005004000060003010400000570000000\",\"difficulty\":1},{\"id\":2206,\"field\":\"000000000000000012034000000005000300200001060000006000100000070000040000008350900\",\"difficulty\":1},{\"id\":820,\"field\":\"000080000200090006050400000000000040500000130700060000000000000001000002034001000\",\"difficulty\":1},{\"id\":2822,\"field\":\"005000000000000060080020710000000000012000000000003004304009005000100000000760000\",\"difficulty\":1},{\"id\":2095,\"field\":\"000000001000002003002004000000050002006000000070100080000800600200000040530000000\",\"difficulty\":1},{\"id\":1241,\"field\":\"460005000000000001000003007001000000002000000000034000000720000500000060300000840\",\"difficulty\":1},{\"id\":796,\"field\":\"000000000001000002034001000000080000200090006050400000000000040500000130700060000\",\"difficulty\":1},{\"id\":1580,\"field\":\"070000600000000800000401000000000000001000000005002034060000200000003001780060000\",\"difficulty\":1},{\"id\":469,\"field\":\"000000001000002003004050000000300400002000000506008000000000060030710000050000020\",\"difficulty\":1},{\"id\":1245,\"field\":\"005460000000000001003000007720000000000500060000300840000001000000002000034000000\",\"difficulty\":1},{\"id\":1584,\"field\":\"000070600000000800401000000000000000000001000002005034000060200003000001060780000\",\"difficulty\":1},{\"id\":2841,\"field\":\"005304009000000100000000760000000000000012000004000003000005000060000000710080020\",\"difficulty\":1},{\"id\":2980,\"field\":\"008000000000005030200069000000000010050020006700300000000000000001000002034001000\",\"difficulty\":1},{\"id\":813,\"field\":\"000040000500130000700000060000000080200006090050000400000000000001002000034000001\",\"difficulty\":1},{\"id\":1247,\"field\":\"460005000000000001000003007000720000500000060300000840001000000002000000000034000\",\"difficulty\":1},{\"id\":434,\"field\":\"000000000012000000000003045500000000000100280000600700000000000006000100800074003\",\"difficulty\":1},{\"id\":2121,\"field\":\"800600000000040200000000530000001000002003000004000002050002000000000006100080070\",\"difficulty\":1},{\"id\":2823,\"field\":\"000005000060000000710080020000000000000012000004000003005304009000000100000000760\",\"difficulty\":1},{\"id\":2970,\"field\":\"000010000020006050300000700000000000000002001001000034000000008005030000069000200\",\"difficulty\":1},{\"id\":1246,\"field\":\"005000460000001000003007000720000000000060500000840300000000001000000002034000000\",\"difficulty\":1},{\"id\":1237,\"field\":\"000005460001000000007003000000000001000000002000034000000720000060000500840000300\",\"difficulty\":1},{\"id\":2370,\"field\":\"000000000000080570160200000000000000000100006075030080000000000000002001003050004\",\"difficulty\":1},{\"id\":7,\"field\":\"000000000000000012003004005000003060010000400570000000000070000000210007400000800\",\"difficulty\":1},{\"id\":2826,\"field\":\"000005000000000060020080710000000000000012000003000004009304005100000000760000000\",\"difficulty\":1},{\"id\":2846,\"field\":\"000000000012000000000000034300000048000070010006520000500000000007000006000014000\",\"difficulty\":1},{\"id\":3167,\"field\":\"080100000000000070000050200001000000000002000040030001205000000003007006000000089\",\"difficulty\":1},{\"id\":2829,\"field\":\"000005000060000000710080020005304009000000100000000760000000000000012000004000003\",\"difficulty\":1},{\"id\":3166,\"field\":\"100000080000070000050200000000000001002000000030001040000000205007006003000089000\",\"difficulty\":1},{\"id\":2211,\"field\":\"005300000200060001000000006000000000000012000034000000100070000000000040008900350\",\"difficulty\":1},{\"id\":474,\"field\":\"000001000000003002004000050000400300002000000506000008000060000030000710050020000\",\"difficulty\":1},{\"id\":2861,\"field\":\"500000000007006000000000014000000000012000000000034000300048000000010070006000520\",\"difficulty\":1},{\"id\":804,\"field\":\"000000000000002001001000034000040000000130500060000700080000000090006200400000050\",\"difficulty\":1},{\"id\":2116,\"field\":\"800000600000200040000530000050000002000006000100070080000000001002000003004002000\",\"difficulty\":1},{\"id\":3140,\"field\":\"001000000000000002040001030205000000003006007000089000080000100000070000000200050\",\"difficulty\":1},{\"id\":1039,\"field\":\"070000000080200006400050000000000000000001002001034000000000040000500130060700000\",\"difficulty\":1},{\"id\":2213,\"field\":\"300005000060200001000000006000000000012000000000034000070100000000000040900008350\",\"difficulty\":1},{\"id\":479,\"field\":\"001000000003002000000050004060000000000710030020000050400300000000000002000008506\",\"difficulty\":1},{\"id\":2358,\"field\":\"000000000000100006075030080000000000000002001003050004000000000000080570160200000\",\"difficulty\":1},{\"id\":2097,\"field\":\"000001000002003000004000002050002000000000006100080070800600000000040200000000530\",\"difficulty\":1},{\"id\":1551,\"field\":\"000000000000001000034005002600070000800000000000000401200060000001000003000780060\",\"difficulty\":1},{\"id\":487,\"field\":\"000000060030710000050000020000300400002000000506008000000000001000002003004050000\",\"difficulty\":1},{\"id\":3146,\"field\":\"205000000003006007000089000001000000000000002040001030080000100000070000000200050\",\"difficulty\":1},{\"id\":794,\"field\":\"000000000002000001000001034000080000006090200000400050040000000130000500000060700\",\"difficulty\":1},{\"id\":2109,\"field\":\"050002000000000006100080070800600000000040200000000530000001000002003000004000002\",\"difficulty\":1},{\"id\":2988,\"field\":\"000000008005030000069000200000000000000002001001000034000010000020006050300000700\",\"difficulty\":1},{\"id\":2855,\"field\":\"000000000012000000000034000500000000007006000000000014300048000000010070006000520\",\"difficulty\":1},{\"id\":2977,\"field\":\"000008000005000030069200000000000010020050006300700000000000000000001002001034000\",\"difficulty\":1},{\"id\":1578,\"field\":\"000070600000000800401000000000060200003000001060780000000000000000001000002005034\",\"difficulty\":1}],[{\"id\":2592,\"field\":\"000080010000000270500900000000000000000012000003000004000006005020300000070000180\",\"difficulty\":2},{\"id\":1590,\"field\":\"000001000000023001004000050000800400030000000710000002000000060000400500020007000\",\"difficulty\":2},{\"id\":1843,\"field\":\"000000000000000012003045000000100006007000000040000500000280000009000400200601000\",\"difficulty\":2},{\"id\":1630,\"field\":\"000000001000000020034000000005000306000007000000012000280000005701000000000600400\",\"difficulty\":2},{\"id\":1740,\"field\":\"000001000000020000003000004000403005020000000600000070000500803270010000900000000\",\"difficulty\":2},{\"id\":2247,\"field\":\"006070000000400010000000580000000000000012000004005003080000000210008000000600009\",\"difficulty\":2},{\"id\":2255,\"field\":\"070006000400000010000000580000080000008210000600000009000000000012000000005004003\",\"difficulty\":2},{\"id\":308,\"field\":\"000000000006000035080170000405000006000700000000810900000000000012000000000003004\",\"difficulty\":2},{\"id\":1733,\"field\":\"001000000020000000000004003500803000010000270000000900403005000000000020000070600\",\"difficulty\":2},{\"id\":1607,\"field\":\"000060000400500000007000020800400000000000030000002710001000000023001000000050004\",\"difficulty\":2},{\"id\":147,\"field\":\"000000000000001000023000000000080030000230090600000400100000000405006000000070026\",\"difficulty\":2},{\"id\":2581,\"field\":\"000010080000270000500000900000005006020000300070180000000000000000000012003004000\",\"difficulty\":2},{\"id\":1494,\"field\":\"000700006030008020050000000000001000000023000004000005000000310506400000900000000\",\"difficulty\":2},{\"id\":1151,\"field\":\"800070000000200100090000500000000000012000000000045003060001000000600000300000078\",\"difficulty\":2},{\"id\":2561,\"field\":\"000000000012000000000004003080010000000270000900000500006005000300000020000180070\",\"difficulty\":2},{\"id\":2916,\"field\":\"000000013700003000800600000000001000000000002003045000000200000010000050600800700\",\"difficulty\":2},{\"id\":3019,\"field\":\"000080600000200000401000000000000001000000023004056000000005000070000030230000080\",\"difficulty\":2},{\"id\":1443,\"field\":\"000000000000012000045000003080300000200000100090500700000000000601070000000000085\",\"difficulty\":2},{\"id\":2472,\"field\":\"000000010000000250046070000000030020008640900500000000000001000000002000003000004\",\"difficulty\":2},{\"id\":2465,\"field\":\"000010000000250000070000046001000000002000000000004003030020000640900008000000500\",\"difficulty\":2},{\"id\":2037,\"field\":\"005306000000000007000000012280009000701000000000400600000001000000020000034000000\",\"difficulty\":2},{\"id\":1124,\"field\":\"000000000012000000000003045060000001000000600300078000800000070000100200090500000\",\"difficulty\":2},{\"id\":2917,\"field\":\"000000000000001002003000040000028100004007000306000000000000500000060030020704000\",\"difficulty\":2},{\"id\":1868,\"field\":\"000000280400009000000200601000000000012000000000003045006000100000007000500040000\",\"difficulty\":2},{\"id\":2469,\"field\":\"010000000250000000000070046020030000900640008000000500000001000000002000004000003\",\"difficulty\":2},{\"id\":1646,\"field\":\"005000280000000701400600000306000005000007000000012000001000000020000000000000034\",\"difficulty\":2},{\"id\":3001,\"field\":\"000005000070000030230000080000000001000000023004056000000080600000200000401000000\",\"difficulty\":2},{\"id\":1597,\"field\":\"000060000000500400020000007000000001000001023004050000000400800030000000710002000\",\"difficulty\":2},{\"id\":1869,\"field\":\"280000000000400009601000200000000000000012000045000003100006000000000007000500040\",\"difficulty\":2},{\"id\":1504,\"field\":\"310000000000506400000900000006000700020030008000050000000000001000000023005004000\",\"difficulty\":2},{\"id\":2280,\"field\":\"000000000000012000003005004000040006010700000580000000000000080000008210009600000\",\"difficulty\":2},{\"id\":2475,\"field\":\"020030000900640008000000500010000000250000000000070046000001000000002000004000003\",\"difficulty\":2},{\"id\":2883,\"field\":\"000001000002000000000045003013000000000003700000600800000200000050000010700800600\",\"difficulty\":2},{\"id\":131,\"field\":\"000100000006405000070000026030000080280000090000600400000000000001000000000023000\",\"difficulty\":2},{\"id\":3072,\"field\":\"000000000000002001003045000000000040000000230061700000000003800070000090600100000\",\"difficulty\":2},{\"id\":2242,\"field\":\"000000000000000012004003005006000070000010400000580000080000000210000008000009600\",\"difficulty\":2},{\"id\":292,\"field\":\"000000000000000012004003000006000405000700000900810000000000000035000006000170080\",\"difficulty\":2},{\"id\":99,\"field\":\"080000000650700000000000320000004000003000000070500006000001000001023000000000045\",\"difficulty\":2},{\"id\":3091,\"field\":\"000800003070090000600000100000000000000001002003000045000040000000230000061000700\",\"difficulty\":2},{\"id\":149,\"field\":\"000000000001000000000023000080000030230000090000600400000100000006405000070000026\",\"difficulty\":2},{\"id\":2276,\"field\":\"000000000012000000005003004040000006700010000000580000000000080008000210600009000\",\"difficulty\":2},{\"id\":128,\"field\":\"000000100006000405070026000030080000280090000000400600000000000001000000000000023\",\"difficulty\":2},{\"id\":661,\"field\":\"000006040010030000700000500000000001000000023004005000000080000000100900023000007\",\"difficulty\":2},{\"id\":2263,\"field\":\"000080000000210008009000600000000000000000012003004005000006070010000400580000000\",\"difficulty\":2},{\"id\":2924,\"field\":\"000000000002000001040003000500000000030000060000020704100000028000004007000306000\",\"difficulty\":2},{\"id\":1358,\"field\":\"000000860000005000000102003030000000000000042780060000000000000002000001005034000\",\"difficulty\":2},{\"id\":1732,\"field\":\"000000001000000020004003000803000500000270010000900000005000403000020000070600000\",\"difficulty\":2},{\"id\":1749,\"field\":\"005403000000000020070000600803500000000010270000000900000001000000020000004000003\",\"difficulty\":2},{\"id\":2253,\"field\":\"006070000000400010000000580080000000210008000000600009000000000000012000004005003\",\"difficulty\":2},{\"id\":3022,\"field\":\"080000600200000000000401000000000001000000023056004000005000000000070030000230080\",\"difficulty\":2},{\"id\":670,\"field\":\"006000040030010000000700500080000000100000900000023007000000001000000023005004000\",\"difficulty\":2},{\"id\":1160,\"field\":\"001000000020000000005003004070000006400020000000580000000000080008000120600009000\",\"difficulty\":2},{\"id\":142,\"field\":\"000080030000090280600400000000000000000000001023000000100000000405000006000026070\",\"difficulty\":2},{\"id\":1125,\"field\":\"000000000000012000045000003001060000600000000000300078070800000200000100000090500\",\"difficulty\":2},{\"id\":2245,\"field\":\"000006070010000400580000000000000000000000012003004005000080000000210008009000600\",\"difficulty\":2},{\"id\":1508,\"field\":\"000000310400506000000900000001000000023000000000004005700000006008030020000050000\",\"difficulty\":2},{\"id\":1163,\"field\":\"001000000020000000005004003070006000400000020000000580000080000008120000600000009\",\"difficulty\":2},{\"id\":1186,\"field\":\"080000000120000008000009600000000001000000020004003005006000070000020400000580000\",\"difficulty\":2},{\"id\":1593,\"field\":\"000001000001023000050000004060000000500400000000007020400800000000000030002000710\",\"difficulty\":2},{\"id\":115,\"field\":\"000000000000000001000023000000100000000405006026000070080000030090000280400600000\",\"difficulty\":2},{\"id\":1624,\"field\":\"000000001000000020034000000280000005701000000000600400005000306000007000000012000\",\"difficulty\":2},{\"id\":180,\"field\":\"030080000090230000400000600000000000000001000000000023000000100000006405026070000\",\"difficulty\":2},{\"id\":1141,\"field\":\"000070800100200000500000090000001060000600000078000300000000000000000012003045000\",\"difficulty\":2},{\"id\":106,\"field\":\"080000000650000700000320000000000001001000023000045000000000004003000000070006500\",\"difficulty\":2},{\"id\":3061,\"field\":\"000000000000001002003000045000800003070090000600000100000040000000230000061000700\",\"difficulty\":2},{\"id\":135,\"field\":\"000030080000280090600000400100000000405006000000070026000000000000001000023000000\",\"difficulty\":2},{\"id\":1342,\"field\":\"000000000001000002000034005000000030042000000000060780860000000000005000003102000\",\"difficulty\":2},{\"id\":1137,\"field\":\"001060000600000000000300078070800000200000100000090500000000000000012000045000003\",\"difficulty\":2},{\"id\":2051,\"field\":\"009280000000701000400000600001000000020000000000034000306005000000000007000000012\",\"difficulty\":2},{\"id\":136,\"field\":\"000080030000090280600400000100000000405000006000026070000000000000000001023000000\",\"difficulty\":2},{\"id\":299,\"field\":\"000000000012000000000004003000000000006035000080000170405006000000000700000900810\",\"difficulty\":2},{\"id\":2711,\"field\":\"001000000020000000000045003002000000607000000000903080000200000090800000005000704\",\"difficulty\":2},{\"id\":2237,\"field\":\"000000000012000000005004003000080000008210000600000009070006000400000010000000580\",\"difficulty\":2},{\"id\":1484,\"field\":\"001000000023000000000004005700000006008030020000050000000000310400506000000900000\",\"difficulty\":2},{\"id\":1585,\"field\":\"000000001000001023004050000000400800030000000710002000000060000000500400020000007\",\"difficulty\":2},{\"id\":137,\"field\":\"030000080280000090000600400000100000006405000070000026000000000001000000000023000\",\"difficulty\":2},{\"id\":1602,\"field\":\"000000060000400500020007000000001000000023001004000050000800400030000000710000002\",\"difficulty\":2},{\"id\":1123,\"field\":\"000000000000000012003045000000001060000600000078000300000070800100200000500000090\",\"difficulty\":2},{\"id\":1747,\"field\":\"000005403020000000600070000000803500270000010900000000000000001000000020003004000\",\"difficulty\":2},{\"id\":82,\"field\":\"000000001001000023000045000000000004003000000070006500080000000650000700000320000\",\"difficulty\":2},{\"id\":2302,\"field\":\"080000000210000008000009600000000000000000012004003005006000040000010700000580000\",\"difficulty\":2},{\"id\":2884,\"field\":\"000000001002000000000003045013000000000700003000800600000000200050010000700600800\",\"difficulty\":2},{\"id\":3079,\"field\":\"000040000000230000061000700000800003070090000600000100000000000000001002003000045\",\"difficulty\":2},{\"id\":1492,\"field\":\"006000700020030008000050000000000001000000023005004000310000000000506400000900000\",\"difficulty\":2},{\"id\":3092,\"field\":\"003000800000070090100600000000000000002000001045003000000000040000000230700061000\",\"difficulty\":2},{\"id\":1846,\"field\":\"000000000000000012045003000100000006000007000000040500280000000000009400601200000\",\"difficulty\":2},{\"id\":680,\"field\":\"000000080900000100007023000001000000023000000000004005040000006000010030500700000\",\"difficulty\":2},{\"id\":1629,\"field\":\"000001000000020000034000000005306000000000007000000012280005000701000000000400600\",\"difficulty\":2},{\"id\":2710,\"field\":\"000000001000000020045003000000000002000000607903080000200000000800000090000704005\",\"difficulty\":2},{\"id\":2473,\"field\":\"000020030008900640500000000000010000000250000046000070000000001000000002003004000\",\"difficulty\":2},{\"id\":1595,\"field\":\"001000000023001000000050004000060000400500000007000020800400000000000030000002710\",\"difficulty\":2},{\"id\":2928,\"field\":\"000000000000002001003040000000500000000030060020000704000100028004000007306000000\",\"difficulty\":2},{\"id\":1130,\"field\":\"060000001000000600300078000000000000012000000000003045800000070000100200090500000\",\"difficulty\":2},{\"id\":1587,\"field\":\"000001000001023000050000004400800000000000030002000710060000000500400000000007020\",\"difficulty\":2},{\"id\":1495,\"field\":\"000006700030020008050000000000310000506000400900000000000000001000000023004005000\",\"difficulty\":2},{\"id\":321,\"field\":\"006405000000000700900000810000000000000012000004000003000000000035006000000080170\",\"difficulty\":2},{\"id\":1850,\"field\":\"006000100000007000500040000000000000012000000000003045000000280400009000000200601\",\"difficulty\":2},{\"id\":2042,\"field\":\"009000280000000701400600000306000005000007000000012000001000000020000000000000034\",\"difficulty\":2},{\"id\":1468,\"field\":\"080000300200100000090700500000000000601000070000085000000000000000000012045003000\",\"difficulty\":2},{\"id\":1764,\"field\":\"000500803270010000900000000000001000000020000003000004000403005020000000600000070\",\"difficulty\":2}],[{\"id\":860,\"field\":\"000000302000080000900740000001000000023000000000000045006000000000002001800050070\",\"difficulty\":3},{\"id\":856,\"field\":\"302000000000080000000740900000000006001002000070050800000000001000000023045000000\",\"difficulty\":3},{\"id\":714,\"field\":\"000700000000008040090000120000040000060000010708500000000001000000023000004000005\",\"difficulty\":3},{\"id\":1548,\"field\":\"000360500210000000800000000000000000000012000003000004000003000020450000600000017\",\"difficulty\":3},{\"id\":3032,\"field\":\"000000000002000001040003000005000000000006370006010002030000400000180000070200000\",\"difficulty\":3},{\"id\":2600,\"field\":\"000000000012000000000003004006000005300020000000070180080000200000000710900500000\",\"difficulty\":3},{\"id\":889,\"field\":\"000040020008900000170000006000030500060007000210000000000000000000001002003000040\",\"difficulty\":3},{\"id\":3059,\"field\":\"030400000000000180070000200000000000002001000040000003005000000000370006006002010\",\"difficulty\":3},{\"id\":875,\"field\":\"000000000002001000040000003500030000000007060000000210020040000000900008006000170\",\"difficulty\":3},{\"id\":941,\"field\":\"001000000023000000000005004700000000008040000000120030040000000000010060500000708\",\"difficulty\":3},{\"id\":1518,\"field\":\"000000000000012000003000004000360500210000000800000000000003000020450000600000017\",\"difficulty\":3},{\"id\":698,\"field\":\"040000000000060010500708000001000000023000000000004005700000000008000040000090120\",\"difficulty\":3},{\"id\":38,\"field\":\"000000000023000001000004056000000084000000200001605000200000000510000000000070300\",\"difficulty\":3},{\"id\":1933,\"field\":\"000200070006000000405008600000000400000006500070100000000000000000000012003045000\",\"difficulty\":3},{\"id\":1527,\"field\":\"000003000000450020017000600000000000000012000004000003500360000000000210000000800\",\"difficulty\":3},{\"id\":2401,\"field\":\"000010000006020008507400000000006700010000000080030000000000001000000023004005000\",\"difficulty\":3},{\"id\":866,\"field\":\"000000000002000001040003000020000040000008900006170000500000030000060007000210000\",\"difficulty\":3},{\"id\":696,\"field\":\"000001000000023000004000005000040000060000010708500000000700000000008040090000120\",\"difficulty\":3},{\"id\":3031,\"field\":\"000000000000001002003000040000000005006370000010002006000400030180000000200000070\",\"difficulty\":3},{\"id\":421,\"field\":\"000500360000700000900000420000002000050006000710000008000000000000000001002034000\",\"difficulty\":3},{\"id\":1889,\"field\":\"500003000000007060009000810000000000012000000000045003700800000300900000000000040\",\"difficulty\":3},{\"id\":1728,\"field\":\"000070060004600000800000050000000000000001000002004003000030004050000001670020000\",\"difficulty\":3},{\"id\":942,\"field\":\"000001000000023000004000005000700000000008040030000120000040000060000010708500000\",\"difficulty\":3},{\"id\":530,\"field\":\"000000600600009070000200001000000302000006000800074000001000000023000000000000045\",\"difficulty\":3},{\"id\":933,\"field\":\"060300000090400000700000200000000000001002000004050003003000000000700016000008700\",\"difficulty\":3},{\"id\":940,\"field\":\"000000001000000023005004000000000700040000008120030000000000040010060000000708500\",\"difficulty\":3},{\"id\":873,\"field\":\"000000000001002000000040003030500000007000060000000210040020000900000008000006170\",\"difficulty\":3},{\"id\":419,\"field\":\"000002000000006050008000710360500000000700000420000900000000000001000000000034002\",\"difficulty\":3},{\"id\":2675,\"field\":\"001000000000002000045000003600000000200070000000100085070003000000800200000006800\",\"difficulty\":3},{\"id\":690,\"field\":\"000001000000023000004000005000700000000008040090000120000040000060000010708500000\",\"difficulty\":3},{\"id\":931,\"field\":\"000060300000090400200700000000000000000001002003004050000003000016000700700000008\",\"difficulty\":3},{\"id\":2388,\"field\":\"000001000000023000004000005000700006010000000080000030000000010006008020507000400\",\"difficulty\":3},{\"id\":2546,\"field\":\"000000860070020000009510000105000000000000040000006370000000000002000001040003000\",\"difficulty\":3},{\"id\":534,\"field\":\"000000600009600070200000001000000302006000000074800000000001000000023000000000045\",\"difficulty\":3},{\"id\":1938,\"field\":\"000070200006000000405600008000400000000500006070000100000000000000012000003000045\",\"difficulty\":3},{\"id\":1317,\"field\":\"000003000000500004170000060000670000050000000800000210000000000000012000045000003\",\"difficulty\":3},{\"id\":403,\"field\":\"000000000000000001002034000000002000050006000710000008000500360000700000900000420\",\"difficulty\":3},{\"id\":1698,\"field\":\"000000000000001000002004003000070060004600000800000050000030004050000001670020000\",\"difficulty\":3},{\"id\":1411,\"field\":\"000000000000001002003000040000030050010006020078000000000090007000380000020000001\",\"difficulty\":3},{\"id\":1275,\"field\":\"000503000006400000020000170000001000000020000004000003200000000710080000000000065\",\"difficulty\":3},{\"id\":2794,\"field\":\"025000060000001000800007000700000000000060400000420900000000001000000023004003000\",\"difficulty\":3},{\"id\":1922,\"field\":\"400000000500000006000070100000000000012000000000003045070000200000006000600405008\",\"difficulty\":3},{\"id\":538,\"field\":\"600000000070009600001200000000000001000000023045000000302000000000006000000074800\",\"difficulty\":3},{\"id\":3117,\"field\":\"050060000710000040000900080069020000000000100000500700000001000002000000000004003\",\"difficulty\":3},{\"id\":432,\"field\":\"000360500000000700900420000000000000000001000002000034000000002050000006710008000\",\"difficulty\":3},{\"id\":2674,\"field\":\"000000001002000000000003045000000600070000200100085000003000070800200000006800000\",\"difficulty\":3},{\"id\":937,\"field\":\"000000001000000023004005000000000700000040008030120000000000040060010000708000500\",\"difficulty\":3},{\"id\":249,\"field\":\"050080000210000000000900400000000000000012000004005003006300000007000050000000710\",\"difficulty\":3},{\"id\":1304,\"field\":\"000000000012000000000003045003000000500004000000060170670000000000000050000210800\",\"difficulty\":3},{\"id\":2421,\"field\":\"000000000001023000060000045002000000000670004000500008500000000080000200000010300\",\"difficulty\":3},{\"id\":2796,\"field\":\"000060025001000000007000800000000700060400000420900000000001000000023000003000004\",\"difficulty\":3},{\"id\":228,\"field\":\"000000000000012000003005004000300006050000007710000000000080050000000210400900000\",\"difficulty\":3},{\"id\":505,\"field\":\"000000001000000023000045000000600000009070600200001000000302000006000000074000800\",\"difficulty\":3},{\"id\":1528,\"field\":\"000000003000020450017600000000000000000000012004003000500000360000210000000800000\",\"difficulty\":3},{\"id\":2305,\"field\":\"000000001000000002003004000000009540080200000100000000000005030010000060720080000\",\"difficulty\":3},{\"id\":1278,\"field\":\"000503000000400006170000020000001000000020000003000004000000200000080710065000000\",\"difficulty\":3},{\"id\":685,\"field\":\"000000001000000023004005000000000700000040008090120000000000040060010000708000500\",\"difficulty\":3},{\"id\":2332,\"field\":\"009000540200080000000100000005000030000010060080720000000000001000000002004003000\",\"difficulty\":3},{\"id\":3129,\"field\":\"069020000000000100000500700000001000002000000000004003050060000710000040000900080\",\"difficulty\":3},{\"id\":3038,\"field\":\"005000000000006370006010002000000000002000001040003000030000400000180000070200000\",\"difficulty\":3},{\"id\":3125,\"field\":\"020069000000000100500000700060050000000710040900000080001000000000002000004000003\",\"difficulty\":3},{\"id\":45,\"field\":\"000000000001023000056000004000200000000510000300000070084000000200000000000001605\",\"difficulty\":3},{\"id\":932,\"field\":\"300000060400000090000200700000000000002000001050003004000000003700016000008700000\",\"difficulty\":3},{\"id\":241,\"field\":\"000050080000210000400000900000006300050007000710000000000000000000000012003004005\",\"difficulty\":3},{\"id\":1067,\"field\":\"350000000000001000008007060800020000000050070007000190000000000001000000000034002\",\"difficulty\":3},{\"id\":1894,\"field\":\"003000500007060000000810009800000700900000300000040000000000000000000012045003000\",\"difficulty\":3},{\"id\":1321,\"field\":\"000000670000050000210800000000000003004000500060170000000000000000000012003045000\",\"difficulty\":3},{\"id\":1050,\"field\":\"000000000000001000002000034000800020070000050190007000000350000000000001060008007\",\"difficulty\":3},{\"id\":2672,\"field\":\"001000000000000002045003000600000000200000070000085100070000003000200800000800006\",\"difficulty\":3},{\"id\":1912,\"field\":\"000000000000000012045003000200000070000006000008405600000000400006000500100070000\",\"difficulty\":3},{\"id\":1065,\"field\":\"000350000001000000007008060020800000050000070000007190000000000000001000034000002\",\"difficulty\":3},{\"id\":2312,\"field\":\"001000000002000000000003004030000005060010000000720080540000009000080200000100000\",\"difficulty\":3},{\"id\":906,\"field\":\"000000000000002001003050004000300060000400090200000700000000003016700000700008000\",\"difficulty\":3},{\"id\":221,\"field\":\"000000000012000000005004003080050000000210000900000400300006000000007050000000710\",\"difficulty\":3},{\"id\":232,\"field\":\"006000300007050000000710000000000000000000012004003005050000080210000000000400900\",\"difficulty\":3},{\"id\":1070,\"field\":\"800000020000070050007190000350000000000000001008060007000000000001000000000002034\",\"difficulty\":3},{\"id\":886,\"field\":\"030000500007060000000210000040000020900008000000170006000000000001000002000003040\",\"difficulty\":3},{\"id\":3057,\"field\":\"400030000000000180000070200000000000001002000000040003000005000370000006002006010\",\"difficulty\":3},{\"id\":1545,\"field\":\"500360000000000210000000800000000000000012000004000003000003000000450020017000600\",\"difficulty\":3},{\"id\":1420,\"field\":\"030000050006010020000078000000000000001000002000003040090000007380000000000020001\",\"difficulty\":3},{\"id\":2624,\"field\":\"080000200000000710900500000000000000012000000000003004006000005300020000000070180\",\"difficulty\":3},{\"id\":1900,\"field\":\"800000700900000300000040000003000500007060000000810009000000000000000012045003000\",\"difficulty\":3},{\"id\":917,\"field\":\"000003000700000016008000700000000000002001000050004003300060000400090000000700200\",\"difficulty\":3},{\"id\":3029,\"field\":\"000000000002001000040000003030400000000000180070000200005000000000370006006002010\",\"difficulty\":3},{\"id\":513,\"field\":\"000001000000023000045000000302000000000000006000800074600000000070600009001000200\",\"difficulty\":3},{\"id\":2788,\"field\":\"025000060000001000800007000000000001000000023004003000700000000000060400000420900\",\"difficulty\":3},{\"id\":2385,\"field\":\"000001000000023000005000004006700000000000010030000080010000000020008006400000507\",\"difficulty\":3},{\"id\":37,\"field\":\"000000000000001023004056000000084000000200000605000001000000200000000510070300000\",\"difficulty\":3},{\"id\":958,\"field\":\"000000040010060000000708500000000700040000008120030000000000001000000023005004000\",\"difficulty\":3},{\"id\":1914,\"field\":\"000000000000012000003000045000070200006000000405600008000400000000500006070000100\",\"difficulty\":3},{\"id\":716,\"field\":\"700000000008000040000090120001000000023000000000004005040000000000060010500708000\",\"difficulty\":3},{\"id\":870,\"field\":\"000000000000002001003040000000020040008000900170006000000500030060000007210000000\",\"difficulty\":3},{\"id\":2542,\"field\":\"000000105040000000370006000860000000000020070000510009000000000001000002000003040\",\"difficulty\":3},{\"id\":1045,\"field\":\"000000000000000001002034000000020800070050000190000007000000350000001000060007008\",\"difficulty\":3},{\"id\":1426,\"field\":\"030000050006010020000078000090000007380000000000020001000000000001000002000003040\",\"difficulty\":3},{\"id\":1711,\"field\":\"000004030050001000670000020000060070004000600800050000000000000000000001002003004\",\"difficulty\":3},{\"id\":2445,\"field\":\"500000000080000200000010300000000000001023000060000045002000000000670004000500008\",\"difficulty\":3},{\"id\":2527,\"field\":\"000000000000001002003000040000000105000040000006370000000860000020000070510000009\",\"difficulty\":3},{\"id\":1723,\"field\":\"000060070004000600800050000000000000000000001002003004000004030050001000670000020\",\"difficulty\":3},{\"id\":217,\"field\":\"000000000000000012003004005000050080000210000400000900000006300050007000710000000\",\"difficulty\":3}],[{\"id\":1219,\"field\":\"000800050100000000300500700000000001000002003045000000000001002000036000007000080\",\"difficulty\":4},{\"id\":196,\"field\":\"005000000062000001000074800000000000001000002000003040700000090300100000000205000\",\"difficulty\":4},{\"id\":1976,\"field\":\"060000500000180007000200000000000000002000001050034000006000000701000000000005340\",\"difficulty\":4},{\"id\":2178,\"field\":\"000500200000000300078000000000001000000023000004000056020037000500000040900000000\",\"difficulty\":4},{\"id\":2004,\"field\":\"000005000004000260070810000000000040006000390800001000000000000000002001003040000\",\"difficulty\":4},{\"id\":2152,\"field\":\"050000060007180000000200000000000006000000701340005000000000000001000002000034050\",\"difficulty\":4},{\"id\":1105,\"field\":\"000400008007000000206030000000000200000060070180007000000000001000002000003000045\",\"difficulty\":4},{\"id\":2000,\"field\":\"005000000000004260810070000000000040000006390001800000000000000002000001040003000\",\"difficulty\":4},{\"id\":268,\"field\":\"005000403000060000080170000000000000000000012004003000523000000000010070000600000\",\"difficulty\":4},{\"id\":613,\"field\":\"000000001000000020003045000000080500190200000600000000000000004000000016075030000\",\"difficulty\":4},{\"id\":1958,\"field\":\"006000000701000000000005340000000000002000001050034000060000500000180007000200000\",\"difficulty\":4},{\"id\":1100,\"field\":\"200000000070000060000180007008000400000007000000206030001000000000000002045003000\",\"difficulty\":4},{\"id\":2191,\"field\":\"020000037500040000900000000000000001000000023004056000000200500000300000078000000\",\"difficulty\":4},{\"id\":361,\"field\":\"000000001000000023004005000000008006000470000620000000000000600000020500037010000\",\"difficulty\":4},{\"id\":1083,\"field\":\"000001000002000000000045003400008000000000007030000206000200000060070000007000180\",\"difficulty\":4},{\"id\":2138,\"field\":\"006000000701000000000005340000000000002000001050034000060000050000180007000200000\",\"difficulty\":4},{\"id\":364,\"field\":\"000000001000000023005004000008000006470000000000620000000000600020000500010037000\",\"difficulty\":4},{\"id\":1208,\"field\":\"002000001000000036080007000050000800000100000700300500001000000003000002000045000\",\"difficulty\":4},{\"id\":1223,\"field\":\"050800000000000100700500300001000000003002000000000045002001000000036000080000007\",\"difficulty\":4},{\"id\":394,\"field\":\"008000006470000000000620000000000001000000023005004000000000600020000500010037000\",\"difficulty\":4},{\"id\":276,\"field\":\"000403005060000000170000080000000523010070000600000000000000000000012000003000004\",\"difficulty\":4},{\"id\":2635,\"field\":\"000000000000000012003045000000000000060100070804000500000003400000908000010200000\",\"difficulty\":4},{\"id\":190,\"field\":\"000000000001000002000003040005000000062000001000074800700000090300100000000205000\",\"difficulty\":4},{\"id\":2632,\"field\":\"000000000000000012045003000003000400908000000200010000000000000100060070000804500\",\"difficulty\":4},{\"id\":2177,\"field\":\"500200000000300000000000078001000000023000000000056004037000020000040500000000900\",\"difficulty\":4},{\"id\":186,\"field\":\"000000000000002001003040000000090700100000300205000000000000005000001062074800000\",\"difficulty\":4},{\"id\":334,\"field\":\"000000000000000001034002000000000250000060000008170000100000097500000006020004000\",\"difficulty\":4},{\"id\":570,\"field\":\"000007800020010000600000040000500000000000200078000300000001000000023000004000056\",\"difficulty\":4},{\"id\":2002,\"field\":\"000000005260004000000070810040000000390006000000800001000000000001000002000003040\",\"difficulty\":4},{\"id\":2129,\"field\":\"000000000002001000050000034060050000000007180000000200006000000701000000000340005\",\"difficulty\":4},{\"id\":332,\"field\":\"000000000001000000000002034250000000000060000000170008097000100006000500000004020\",\"difficulty\":4},{\"id\":1111,\"field\":\"000400008007000000206030000000000001000002000003000045000000200000060070180007000\",\"difficulty\":4},{\"id\":1115,\"field\":\"008400000000000007000030206001000000000002000045000003200000000070060000000007180\",\"difficulty\":4},{\"id\":201,\"field\":\"005000000062001000000800074700090000300000100000000205000000000001002000000040003\",\"difficulty\":4},{\"id\":2190,\"field\":\"020037000500000040900000000000500200000000300078000000000001000000023000004000056\",\"difficulty\":4},{\"id\":1814,\"field\":\"000000006008000057000021000001000000023000000000004005000030100400500000700900000\",\"difficulty\":4},{\"id\":208,\"field\":\"700000090300100000000205000005000000062000001000074800000000000001000002000003040\",\"difficulty\":4},{\"id\":2662,\"field\":\"003000400908000000200010000000000000000000012045003000000000000100060070000804500\",\"difficulty\":4},{\"id\":278,\"field\":\"000000523070010000000600000403000005000060000000170080000000000012000000000003004\",\"difficulty\":4},{\"id\":576,\"field\":\"000007800020010000600000040000001000000023000004000056000500000000000200078000300\",\"difficulty\":4},{\"id\":253,\"field\":\"000000000000000012003004000000523000010000070600000000000005403060000000170080000\",\"difficulty\":4},{\"id\":583,\"field\":\"000000000000000012003004000000000003005000400060120000000000500010070080720000090\",\"difficulty\":4},{\"id\":1110,\"field\":\"000008400007000000206000030000200000000070060180000007000001000000000002003045000\",\"difficulty\":4},{\"id\":2011,\"field\":\"000040000006390000800000001000000000000001002003000040000000005004260000070000810\",\"difficulty\":4},{\"id\":612,\"field\":\"000500000010080070720090000000000000000012000003000004000003000005400000060000120\",\"difficulty\":4},{\"id\":1834,\"field\":\"100030000000500400000900700000000001000000023005004000006000000057000008000021000\",\"difficulty\":4},{\"id\":586,\"field\":\"000000000000000012004003000000000003000005400120060000000000500070010080000720090\",\"difficulty\":4},{\"id\":604,\"field\":\"000000500070010080000720090000000003000005400120060000000000000000000012004003000\",\"difficulty\":4},{\"id\":544,\"field\":\"000000001000000023056004000800000007000020010040600000000000500200000000300078000\",\"difficulty\":4},{\"id\":581,\"field\":\"000000000012000000000004003500000000080070010090000720003000000400000005000120060\",\"difficulty\":4},{\"id\":1832,\"field\":\"000030100400500000700900000001000000023000000000004005000000006008000057000021000\",\"difficulty\":4},{\"id\":2156,\"field\":\"060000050000180007000200000000000000002000001050034000006000000701000000000005340\",\"difficulty\":4},{\"id\":600,\"field\":\"000003000005400000060000120000500000010080070720090000000000000000012000003000004\",\"difficulty\":4},{\"id\":577,\"field\":\"000000000000000012003004000000000500010070080720000090000000003005000400060120000\",\"difficulty\":4},{\"id\":1959,\"field\":\"000006000000701000340000005000000000001002000000050034500060000007000180000000200\",\"difficulty\":4},{\"id\":2180,\"field\":\"500000200000000300000078000037020000000500040000900000001000000023000000000004056\",\"difficulty\":4},{\"id\":545,\"field\":\"001000000023000000000056004007800000010000020000040600500000000000200000000300078\",\"difficulty\":4},{\"id\":2147,\"field\":\"006000000701000000000340005060050000000007180000000200000000000002001000050000034\",\"difficulty\":4},{\"id\":2160,\"field\":\"000060050180000007200000000000000000000002001034050000000006000000701000005000340\",\"difficulty\":4},{\"id\":348,\"field\":\"000250000060000000170000008000097100000006500004000020000000000000001000002000034\",\"difficulty\":4},{\"id\":346,\"field\":\"000000250000060000008170000100000097500000006020004000000000000000000001034002000\",\"difficulty\":4},{\"id\":2167,\"field\":\"000000001000000023004056000000200500000300000078000000020000037500040000900000000\",\"difficulty\":4},{\"id\":387,\"field\":\"008006000470000000000000620000600000020500000010000037000001000000023000005000004\",\"difficulty\":4},{\"id\":1984,\"field\":\"000000000001000002000003040040000000390006000000800001000000005260004000000070810\",\"difficulty\":4},{\"id\":1089,\"field\":\"000001000002000000000045003000200000060070000007000180400008000000000007030000206\",\"difficulty\":4},{\"id\":549,\"field\":\"000001000000023000056000004000500000200000000300000078800007000000010020040000600\",\"difficulty\":4},{\"id\":2169,\"field\":\"000001000000023000056000004200500000300000000000000078000037020040000500000000900\",\"difficulty\":4},{\"id\":396,\"field\":\"000006008000000470620000000000001000000023000004000005000600000000500020037000010\",\"difficulty\":4},{\"id\":1972,\"field\":\"500000060007180000000200000000000006000000701340005000000000000001000002000034050\",\"difficulty\":4},{\"id\":2176,\"field\":\"200000500300000000000078000000000001000000023056004000000020037040500000000900000\",\"difficulty\":4},{\"id\":1373,\"field\":\"001000000002000000000004003807010000000920000000000036060005000040000010000000720\",\"difficulty\":4},{\"id\":616,\"field\":\"000000001000000020045003000080000500200190000000600000000000004000000016030075000\",\"difficulty\":4},{\"id\":2630,\"field\":\"000000000012000000000003045400000003000000908000010200000000000070060100500804000\",\"difficulty\":4},{\"id\":1957,\"field\":\"000000006000000701005340000000000000000001002034000050000500060180007000200000000\",\"difficulty\":4},{\"id\":2014,\"field\":\"040000000390006000000800001000000000001000002000003040000000005260004000000070810\",\"difficulty\":4},{\"id\":2168,\"field\":\"001000000023000000000004056500000200000000300000078000037020000000500040000900000\",\"difficulty\":4},{\"id\":2154,\"field\":\"000060050180000007200000000000006000000701000005000340000000000000002001034050000\",\"difficulty\":4},{\"id\":2163,\"field\":\"000001000000023000056000004000037020040000500000000900200500000300000000000000078\",\"difficulty\":4},{\"id\":1982,\"field\":\"000000000002000001040003000000000040000006390001800000005000000000004260810070000\",\"difficulty\":4},{\"id\":2651,\"field\":\"000000000070100060500000804400003000000908000000200010000000000012000000000045003\",\"difficulty\":4},{\"id\":1807,\"field\":\"000000001000000023004005000000006000000057008021000000030100000500000400900000700\",\"difficulty\":4},{\"id\":614,\"field\":\"001000000020000000000003045500000080000190200000600000004000000016000000000075030\",\"difficulty\":4},{\"id\":2175,\"field\":\"200500000300000000000000078000001000000023000056000004000037020040000500000000900\",\"difficulty\":4},{\"id\":1974,\"field\":\"000060500180000007200000000000006000000701000005000340000000000000002001034050000\",\"difficulty\":4},{\"id\":2179,\"field\":\"000200500000300000078000000020000037500040000900000000000000001000000023004056000\",\"difficulty\":4},{\"id\":1378,\"field\":\"000000001000000002004003000005000060000010040000720000010000807920000000000036000\",\"difficulty\":4},{\"id\":1096,\"field\":\"000000200060000070007180000000000001002000000000003045400000008000007000030206000\",\"difficulty\":4},{\"id\":1946,\"field\":\"000000000002000001050034000060000500000180007000200000006000000701000000000005340\",\"difficulty\":4},{\"id\":285,\"field\":\"523000000000070010000000600000000000000012000004000003005403000000000060080000170\",\"difficulty\":4},{\"id\":2008,\"field\":\"040000000390006000000800001000000005260004000000070810000000000001000002000003040\",\"difficulty\":4},{\"id\":1384,\"field\":\"005000060000010040000720000000000001000000002004003000010000807920000000000036000\",\"difficulty\":4},{\"id\":2158,\"field\":\"050000060007180000000200000000000000001000002000034050000000006000000701340005000\",\"difficulty\":4},{\"id\":1093,\"field\":\"000000200000060070180007000000000001000002000003000045000400008007000000206030000\",\"difficulty\":4},{\"id\":552,\"field\":\"000001000000023000004000056000500000000000200078000300000007800020010000600000040\",\"difficulty\":4},{\"id\":1209,\"field\":\"001002000036000000000080007800050000000000100500700300000001000002003000000000045\",\"difficulty\":4},{\"id\":384,\"field\":\"000600000000500020037000010000006008000000470620000000000001000000023000004000005\",\"difficulty\":4},{\"id\":197,\"field\":\"000005000001062000800000074000000000002001000040000003090700000000300100000000205\",\"difficulty\":4},{\"id\":344,\"field\":\"250000000000060000000170008097000100006000500000004020000000000001000000000002034\",\"difficulty\":4},{\"id\":1826,\"field\":\"000030100400500000700900000000000006008000057000021000001000000023000000000004005\",\"difficulty\":4},{\"id\":1201,\"field\":\"000001002000036000007000080000000001000002003045000000000800050100000000300500700\",\"difficulty\":4}],[{\"id\":1675,\"field\":\"000005000000062001078000300000800070100400000250000000000000000000001002003000040\",\"difficulty\":5},{\"id\":1765,\"field\":\"000000000000001002003000040000700090100300000250000000000005000000062001047000800\",\"difficulty\":5},{\"id\":1662,\"field\":\"000000000000002001003040000000070800100000400250000000000000005000001062078300000\",\"difficulty\":5},{\"id\":2756,\"field\":\"000000001600000025080047000090000400000200010000506000001000000000000002040003000\",\"difficulty\":5},{\"id\":1005,\"field\":\"000670000003000000100000290000000000001002000000050034000000000040030006580000007\",\"difficulty\":5},{\"id\":1658,\"field\":\"000000000002000001040003000070000800000100400000250000000000005001000062300078000\",\"difficulty\":5},{\"id\":791,\"field\":\"000400000309000006000108020000000000012000000000004003000000000007056000080000240\",\"difficulty\":5},{\"id\":2500,\"field\":\"002000000050000030006200070000000000001000002000034050080000000300070040000100006\",\"difficulty\":5},{\"id\":2771,\"field\":\"090400000000010200000000506001000000000002000040000003000001000600025000080000047\",\"difficulty\":5},{\"id\":985,\"field\":\"000000000006040030007580000000000000000001002034000050000000670000003000290100000\",\"difficulty\":5},{\"id\":3588,\"field\":\"000205000006001000037000080000000640000090730500000000000000000000002001003040000\",\"difficulty\":5},{\"id\":2769,\"field\":\"400090000010000200000000506000001000002000000000040003001000000025600000000080047\",\"difficulty\":5},{\"id\":2062,\"field\":\"000000001000000023005004000004000500067000000000030002800000000300010000000407600\",\"difficulty\":5},{\"id\":973,\"field\":\"000000000000001002034000050000000670000003000290100000000000000006040030007580000\",\"difficulty\":5},{\"id\":2752,\"field\":\"001000000025000600000047080000000001002000000000003040400000090010200000000506000\",\"difficulty\":5},{\"id\":2751,\"field\":\"001000000025600000000080047000001000002000000000040003400090000010000200000000506\",\"difficulty\":5},{\"id\":2485,\"field\":\"000000000000001002034000050000080000070300040100000006000002000000050030200006070\",\"difficulty\":5},{\"id\":1784,\"field\":\"000000005001000062800047000090000700000100300000250000000000000002000001040003000\",\"difficulty\":5},{\"id\":2764,\"field\":\"400000090010200000000506000001000000025000600000047080000000001002000000000003040\",\"difficulty\":5},{\"id\":783,\"field\":\"400000000000309006108000020000000000056007000000080240000000000000012000004000003\",\"difficulty\":5},{\"id\":3565,\"field\":\"000000000000001002003000040000640000000730090500000000000000205006000001037080000\",\"difficulty\":5},{\"id\":988,\"field\":\"000000000040006030580007000000000000001000002000034050000000670003000000100290000\",\"difficulty\":5},{\"id\":3575,\"field\":\"000000000002001000040000003205000000001000006000080037000640000090730000000000500\",\"difficulty\":5},{\"id\":759,\"field\":\"000000000000012000004000003400000000000309006108000020000000000056007000000080240\",\"difficulty\":5},{\"id\":3572,\"field\":\"000000000002000001040003000205000000001006000000037080000000640090000730000500000\",\"difficulty\":5},{\"id\":1678,\"field\":\"005000000062000001000078300800000070400100000000250000000000000001000002000003040\",\"difficulty\":5},{\"id\":2501,\"field\":\"000002000030050000070006200000000000002001000050000034000080000040300070006000100\",\"difficulty\":5},{\"id\":2518,\"field\":\"080000000300070040000100006000000000001000002000034050002000000050000030006200070\",\"difficulty\":5},{\"id\":1779,\"field\":\"005000000062001000000800047000000000001002000000040003700090000300000100000000250\",\"difficulty\":5},{\"id\":2069,\"field\":\"500004000000067000002000030001000000023000000000005004000800000000300010600000407\",\"difficulty\":5},{\"id\":1768,\"field\":\"000000000001000002000003040700000090300100000000250000005000000062000001000047800\",\"difficulty\":5},{\"id\":2767,\"field\":\"000400090200010000506000000000000001000002000003000040000001000000025600047000080\",\"difficulty\":5},{\"id\":2748,\"field\":\"000001000000000002003040000000000001000600025047080000000090400200000010506000000\",\"difficulty\":5},{\"id\":994,\"field\":\"000000000040006030580007000000000670003000000100290000000000000001000002000034050\",\"difficulty\":5},{\"id\":986,\"field\":\"000000000030006040000007580000000000002000001050034000670000000000000003000290100\",\"difficulty\":5},{\"id\":1790,\"field\":\"090000700000100300000250000000000005001000062800047000000000000002000001040003000\",\"difficulty\":5},{\"id\":991,\"field\":\"000000000006040030007580000000000670000003000290100000000000000000001002034000050\",\"difficulty\":5},{\"id\":1777,\"field\":\"000005000000062001047000800000000000000001002003000040000700090100300000250000000\",\"difficulty\":5},{\"id\":975,\"field\":\"000000000001002000000050034000670000003000000100000290000000000040030006580000007\",\"difficulty\":5},{\"id\":2085,\"field\":\"800000000300000010000600407000001000000023000005000004004500000067000000000002030\",\"difficulty\":5},{\"id\":999,\"field\":\"000670000003000000100000290000000000040030006580000007000000000001002000000050034\",\"difficulty\":5},{\"id\":2054,\"field\":\"001000000023000000000004005000000800000010300600407000500000004000000067002030000\",\"difficulty\":5},{\"id\":2063,\"field\":\"001000000023000000000005004500004000000067000002000030000800000000300010600000407\",\"difficulty\":5},{\"id\":1674,\"field\":\"000000005000001062078300000000000000000002001003040000000070800100000400250000000\",\"difficulty\":5},{\"id\":1001,\"field\":\"670000000000003000000100290000000000030040006000580007000000000002001000050000034\",\"difficulty\":5},{\"id\":2081,\"field\":\"000800000000300010600000407500004000000067000002000030001000000023000000000005004\",\"difficulty\":5},{\"id\":2086,\"field\":\"800000000300010000000407600000000001000000023005004000004000500067000000000030002\",\"difficulty\":5},{\"id\":3579,\"field\":\"000205000000001006080000037000000000001002000000040003640000000730090000000000500\",\"difficulty\":5},{\"id\":2505,\"field\":\"002000000050030000006070200080000000300040070000006100000000000001002000000050034\",\"difficulty\":5},{\"id\":2758,\"field\":\"001000000025000600000047080400000090010200000000506000000000001002000000000003040\",\"difficulty\":5},{\"id\":2516,\"field\":\"000000080040070300006100000000000000002000001050034000000000002030000050070200006\",\"difficulty\":5},{\"id\":2519,\"field\":\"000080000040300070006000100000000000002001000050000034000002000030050000070006200\",\"difficulty\":5},{\"id\":1006,\"field\":\"000000670003000000100290000000000000001000002000034050000000000040006030580007000\",\"difficulty\":5},{\"id\":3585,\"field\":\"000205000000001006080000037640000000730090000000000500000000000001002000000040003\",\"difficulty\":5},{\"id\":1791,\"field\":\"700090000300000100000000250005000000062001000000800047000000000001002000000040003\",\"difficulty\":5},{\"id\":3592,\"field\":\"640000000730000090000500000000000205000006001080037000000000000001000002000003040\",\"difficulty\":5},{\"id\":1673,\"field\":\"000005000001062000300000078000000000002001000040000003070800000000400100000000250\",\"difficulty\":5},{\"id\":789,\"field\":\"400000000000309006108000020000000000000012000004000003000000000056007000000080240\",\"difficulty\":5},{\"id\":3589,\"field\":\"000640000000730090500000000000000205006000001037080000000000000000001002003000040\",\"difficulty\":5},{\"id\":2072,\"field\":\"500000004000000067002030000000000800000010300600407000001000000023000000000004005\",\"difficulty\":5},{\"id\":1771,\"field\":\"000000000000001002003000040000005000000062001047000800000700090100300000250000000\",\"difficulty\":5},{\"id\":3574,\"field\":\"000000000001000002000003040000000205000006001080037000640000000730000090000500000\",\"difficulty\":5},{\"id\":1657,\"field\":\"000000000000001002003000040000800070100400000250000000000005000000062001078000300\",\"difficulty\":5},{\"id\":2739,\"field\":\"000001000002000000000040003400090000010000200000000506001000000025600000000080047\",\"difficulty\":5},{\"id\":2768,\"field\":\"090000400000200010000506000001000000000000002040003000000000001600000025080047000\",\"difficulty\":5},{\"id\":780,\"field\":\"000000000000007056240080000000000400006309000020000108000000000000012000003000004\",\"difficulty\":5},{\"id\":3573,\"field\":\"000000000001002000000040003000205000000001006080000037640000000730090000000000500\",\"difficulty\":5},{\"id\":2059,\"field\":\"000000001000000023004005000000004500000067000030000002000800000010300000407000600\",\"difficulty\":5},{\"id\":987,\"field\":\"000000000040030006580000007000000000001002000000050034000670000003000000100000290\",\"difficulty\":5},{\"id\":1785,\"field\":\"005000000062001000000800047700090000300000100000000250000000000001002000000040003\",\"difficulty\":5},{\"id\":2068,\"field\":\"004000500067000000000030002000000001000000023005004000800000000300010000000407600\",\"difficulty\":5},{\"id\":1665,\"field\":\"000000000001002000000040003005000000062001000000300078800070000400000100000000250\",\"difficulty\":5},{\"id\":2502,\"field\":\"000000002000030050200070006000000000000002001034050000000000080070040300100006000\",\"difficulty\":5},{\"id\":1000,\"field\":\"000000670003000000100290000000000000040006030580007000000000000001000002000034050\",\"difficulty\":5},{\"id\":773,\"field\":\"000000000007056000080000240000000000012000000000004003000400000309000006000108020\",\"difficulty\":5},{\"id\":2766,\"field\":\"000090400200000010506000000000000001000600025047080000000001000000000002003040000\",\"difficulty\":5},{\"id\":2508,\"field\":\"000000002000030050200070006000000080070040300100006000000000000000002001034050000\",\"difficulty\":5},{\"id\":2088,\"field\":\"000000800010000300407600000000001000000023000004000005000500004000000067030002000\",\"difficulty\":5},{\"id\":3587,\"field\":\"205000000001000006000080037000640000090730000000000500000000000002001000040000003\",\"difficulty\":5},{\"id\":1687,\"field\":\"000800070100400000250000000000000000000001002003000040000005000000062001078000300\",\"difficulty\":5},{\"id\":3567,\"field\":\"000000000001002000000040003640000000730090000000000500000205000000001006080000037\",\"difficulty\":5},{\"id\":764,\"field\":\"000000000012000000000003004000000000007000056080240000000000400309006000000020108\",\"difficulty\":5},{\"id\":1670,\"field\":\"000000005001000062300078000000000000002000001040003000070000800000100400000250000\",\"difficulty\":5},{\"id\":2760,\"field\":\"000000001000600025047080000000090400200000010506000000000001000000000002003040000\",\"difficulty\":5},{\"id\":1778,\"field\":\"000000005001000062800047000000000000002000001040003000090000700000100300000250000\",\"difficulty\":5},{\"id\":1661,\"field\":\"000000000002001000040000003070800000000400100000000250000005000001062000300000078\",\"difficulty\":5},{\"id\":2491,\"field\":\"000000000000001002034000050000002000000050030200006070000080000070300040100000006\",\"difficulty\":5},{\"id\":781,\"field\":\"000400000006000309020108000000000000000056007240000080000000000000000012003004000\",\"difficulty\":5},{\"id\":1659,\"field\":\"000000000001002000000040003800070000400000100000000250005000000062001000000300078\",\"difficulty\":5},{\"id\":3596,\"field\":\"000000640090000730000500000000000000002000001040003000205000000001006000000037080\",\"difficulty\":5},{\"id\":1667,\"field\":\"000000000002001000040000003000005000001062000300000078070800000000400100000000250\",\"difficulty\":5},{\"id\":2057,\"field\":\"001000000023000000000005004000800000000300010600000407500004000000067000002000030\",\"difficulty\":5},{\"id\":2060,\"field\":\"001000000023000000000004005500000004000000067002030000000000800000010300600407000\",\"difficulty\":5},{\"id\":2737,\"field\":\"000000001000002000003000040000400090200010000506000000000001000000025600047000080\",\"difficulty\":5},{\"id\":2487,\"field\":\"000000000001002000000050034080000000300040070000006100002000000050030000006070200\",\"difficulty\":5},{\"id\":1792,\"field\":\"700000090300100000000250000005000000062000001000047800000000000001000002000003040\",\"difficulty\":5},{\"id\":981,\"field\":\"000000000001002000000050034000000000040030006580000007000670000003000000100000290\",\"difficulty\":5},{\"id\":1681,\"field\":\"000800070100400000250000000000005000000062001078000300000000000000001002003000040\",\"difficulty\":5},{\"id\":2757,\"field\":\"001000000025600000000080047400090000010000200000000506000001000002000000000040003\",\"difficulty\":5},{\"id\":1690,\"field\":\"800000070400100000000250000000000000001000002000003040005000000062000001000078300\",\"difficulty\":5}],[],[],[{\"id\":722,\"field\":\"001000000002000001000003040000000374080010000000900000040000000000000002730560000\",\"difficulty\":8},{\"id\":734,\"field\":\"040000000000000002730560000001000000002000001000003040000000374080010000000900000\",\"difficulty\":8},{\"id\":737,\"field\":\"040000000000002000730000560001000000002001000000040003000374000080000010000000900\",\"difficulty\":8},{\"id\":729,\"field\":\"000001000001002000040000003000040000002000000000730560374000000000080010000000900\",\"difficulty\":8},{\"id\":753,\"field\":\"374000000000080010000000900000001000001002000040000003000040000002000000000730560\",\"difficulty\":8},{\"id\":738,\"field\":\"000040000000000002560730000000001000000002001003000040000000374010080000900000000\",\"difficulty\":8},{\"id\":751,\"field\":\"000374000010000080900000000000000001000001002003040000000000040000002000560000730\",\"difficulty\":8},{\"id\":746,\"field\":\"000000374080010000000900000040000000000000002730560000001000000002000001000003040\",\"difficulty\":8},{\"id\":730,\"field\":\"000000001001000002040003000000000040002000000000560730374000000000010080000900000\",\"difficulty\":8},{\"id\":725,\"field\":\"001000000002001000000040003000374000080000010000000900040000000000002000730000560\",\"difficulty\":8},{\"id\":726,\"field\":\"000001000000002001003000040000000374010080000900000000000040000000000002560730000\",\"difficulty\":8},{\"id\":733,\"field\":\"000000040000002000560000730000000001000001002003040000000374000010000080900000000\",\"difficulty\":8},{\"id\":740,\"field\":\"040000000000000002730560000000000374080010000000900000001000000002000001000003040\",\"difficulty\":8},{\"id\":750,\"field\":\"000000374010080000900000000000040000000000002560730000000001000000002001003000040\",\"difficulty\":8},{\"id\":749,\"field\":\"000374000080000010000000900040000000000002000730000560001000000002001000000040003\",\"difficulty\":8},{\"id\":724,\"field\":\"000000001001000002040003000374000000000010080000900000000000040002000000000560730\",\"difficulty\":8},{\"id\":739,\"field\":\"000000040000002000560000730000374000010000080900000000000000001000001002003040000\",\"difficulty\":8},{\"id\":742,\"field\":\"000000040002000000000560730374000000000010080000900000000000001001000002040003000\",\"difficulty\":8},{\"id\":743,\"field\":\"040000000000002000730000560000374000080000010000000900001000000002001000000040003\",\"difficulty\":8},{\"id\":745,\"field\":\"000374000010000080900000000000000040000002000560000730000000001000001002003040000\",\"difficulty\":8},{\"id\":735,\"field\":\"000040000002000000000730560000001000001002000040000003374000000000080010000000900\",\"difficulty\":8},{\"id\":731,\"field\":\"001000000002001000000040003040000000000002000730000560000374000080000010000000900\",\"difficulty\":8},{\"id\":752,\"field\":\"000000374080010000000900000001000000002000001000003040040000000000000002730560000\",\"difficulty\":8},{\"id\":744,\"field\":\"000040000000000002560730000000000374010080000900000000000001000000002001003000040\",\"difficulty\":8},{\"id\":756,\"field\":\"000000374010080000900000000000001000000002001003000040000040000000000002560730000\",\"difficulty\":8},{\"id\":732,\"field\":\"000001000000002001003000040000040000000000002560730000000000374010080000900000000\",\"difficulty\":8},{\"id\":727,\"field\":\"000000001000001002003040000000000040000002000560000730000374000010000080900000000\",\"difficulty\":8},{\"id\":741,\"field\":\"000040000002000000000730560374000000000080010000000900000001000001002000040000003\",\"difficulty\":8},{\"id\":723,\"field\":\"000001000001002000040000003374000000000080010000000900000040000002000000000730560\",\"difficulty\":8},{\"id\":747,\"field\":\"374000000000080010000000900000040000002000000000730560000001000001002000040000003\",\"difficulty\":8},{\"id\":728,\"field\":\"001000000002000001000003040040000000000000002730560000000000374080010000000900000\",\"difficulty\":8},{\"id\":754,\"field\":\"374000000000010080000900000000000001001000002040003000000000040002000000000560730\",\"difficulty\":8},{\"id\":736,\"field\":\"000000040002000000000560730000000001001000002040003000374000000000010080000900000\",\"difficulty\":8},{\"id\":721,\"field\":\"000000001000001002003040000000374000010000080900000000000000040000002000560000730\",\"difficulty\":8},{\"id\":748,\"field\":\"374000000000010080000900000000000040002000000000560730000000001001000002040003000\",\"difficulty\":8},{\"id\":755,\"field\":\"000374000080000010000000900001000000002001000000040003040000000000002000730000560\",\"difficulty\":8}],[]]'),\n}","export default{\n    SET_TOKEN(state, token) {\n        state.token = token\n        localStorage.setItem('token',token)\n        // console.log('hello')\n        console.log(localStorage.getItem('token'))\n    },\n    LOG_OUT(state) {\n        state.token = ''\n        localStorage.removeItem('token')\n        state.user = null\n        localStorage.removeItem('user')\n    },\n    SET_FIELDS(state,payload) {\n        // console.log(payload)\n        // payload.forEach(difAr => {\n        //     difAr.filter()\n        // })\n        state.fields = payload\n        localStorage.setItem('fields' ,JSON.stringify(state.fields))\n        // console.log(JSON.parse(JSON.stringify(payload)))\n    },\n    IGNORE_FIELD(state,difficulty) {\n        // state.fields[difficulty].indexOf(item => item.id === id)\n        // console.log('ignor')\n        state.ignored.push(state.fields[difficulty].shift())\n        localStorage.setItem('ignored' ,JSON.stringify(state.ignored))\n        // console.log(state.fields[difficulty].length)\n    },\n    SOLVE_FIELD(state,payload) {\n        // console.log(state.fields)\n        state.solved.push({\n            id: payload[0],\n            solution: payload[1]\n        })\n        localStorage.setItem('solved' ,JSON.stringify(state.solved))\n        // console.log(state.fields[payload[2]].findIndex(item => item.id === payload[0]),1)\n        let index = state.fields[payload[2]].findIndex(item => item.id === payload[0])\n        if (index >0) {\n            state.fields[payload[2]].splice(index,1)\n        }\n        // state.fields[payload[2]].findIndex(item => item.id === payload[0])\n        // console.log(state.solved)\n    },\n    SOLVE_CLEAN(state) {\n        state.solved = []\n        localStorage.removeItem('solved')\n    },\n    CHECK_SUCCESS(state, data) {\n        // console.log('check')\n        // console.log(data)\n        state.user = data\n        localStorage.setItem('user',JSON.stringify(state.user))\n    }\n}\n","// import sudokuData from \"@/store/sudoku/sudokuData\";\nexport default {\n    // field: (state) => id => {\n    //     // if (context.state.fields.length + 250 > id) {\n    //     //     setTimeout(()=>{\n    //     //         console.log(1)\n    //     //         let x = new sudokuData.sudokuData([1,1,1])\n    //     //         x.newField().then(console.log)\n    //     //     },10)\n    //     // }\n    //     return  state.fields[id]\n    // },\n    fields: state => state.fields,\n    field: state => difficulty => state.fields[difficulty][0],\n    getUser: state => state.user,\n    getToken: state => state.token\n    // getDataOptions: state => {\n        //     let x = []\n        //     state.fields.forEach(item => {\n        //         x.push(item.length-1)\n        //     })\n        //     return x\n        // },\n    // fields: state => state.fields.slice(0,100),\n    // fieldsN: state => (start,count) => {\n    //     count = (count<state.fields.length) ? count : state.fields.length\n    //     return state.fields.slice(start,count)\n    // }\n}\n","import actions from \"./actions\";\nimport state from \"./state\";\nimport mutations from \"./mutations\"\nimport getters from \"./getters\"\nexport default {\n    namespaced: true,\n    state,\n    mutations,\n    getters,\n    actions\n}\n","export default {\n    initialization(context, id) {\n        //context.commit('SAVE_PERSONAL_DATA')\n        context.commit('INITIALIZATION', context.rootGetters['dataManage/field'](id))\n        context.dispatch('allPossubly')\n        context.dispatch('front/initialization', context.state.selectedStringField)\n    },\n    initializationString(context, str) {\n        context.commit('INITIALIZATION', str)\n        context.dispatch('allPossubly')\n        context.dispatch('front/initialization', context.state.selectedStringField)\n    },\n    newField (context) {\n        context.commit('NEW_FIELD')\n    },\n    savePersonalData (context) {\n        context.commit('SET_PERSONAL_DATA')\n    },\n    autoResolution(context) {\n        context.commit('AUTO_RESOLUTIONS')\n        if (context.state.savedData.autoresolution) {\n            context.dispatch('onePossubly')\n        }\n    },\n    onlePossiblySwitch(context) {\n        if (context.state.savedData.autoresolution) {\n            context.commit('AUTO_RESOLUTIONS')\n        }\n        context.commit('ONE_POSSIBLY_SWITCH')\n        context.dispatch('allPossubly')\n    },\n    onlyHereSwitch(context) {\n        if (context.state.savedData.autoresolution) {\n            context.commit('AUTO_RESOLUTIONS')\n        }\n        context.commit('ONLY_HERE_SWITCH')\n        context.dispatch('allPossubly')\n    },\n    allPossubly(context) {\n        context.commit('EXIST_VALUE',context.state.field)\n        if (context.state.savedData.autoresolution) {\n            setTimeout(() => {\n                if (context.state.savedData.autoresolution) {\n                    context.dispatch('onePossubly')\n                }\n            }, 1000)\n        }\n        context.commit('POSSIBLY_APDATE')\n    },\n    onePossubly(context) {\n        let haspossibly = false\n        let payload = {\n            value: null,\n            target: null\n        }\n        for (let i = 0; i < 81; i++) {\n            if (context.state.field[i].possibly.size === 1 && context.state.field[i].value === 0) {\n                haspossibly = true\n                context.state.field[i].possibly.forEach(item => {\n                    payload.value = item\n                })\n                payload.target = i\n            }\n        }\n        if (haspossibly) {\n            context.dispatch('setFieldValue', payload)\n        }\n    },\n    fieldPossubly (context, stringField) {\n        //stringField is string\n        let field = []\n        stringField.forEach((item, index) => {\n            field.push({\n                id: index,\n                value: +item,\n                possibly: new Set()\n            })\n        })\n        context.dispatch('segmentsPossubly',field)\n    },\n    setFieldValue(context, payload) {\n        if (context.state.selectedStringField[payload.target] === '0' &&\n            (context.state.field[payload.target].possibly.has(payload.value) || payload.value === 0)) {\n            context.commit('SET_FIELD_VALUE', payload)\n            context.dispatch('allPossubly')\n        }\n    },\n    undoLastValue(context) {\n        if (context.state.savedData.autoresolution) {\n            context.commit('AUTO_RESOLUTIONS')\n        }\n        if (context.state.moveHistory.length) {\n            let local = context.state.moveHistory.pop()\n            context.dispatch('setFieldValue', {\n                value: local.exvalue,\n                target: local.buttonid,\n                unsave: true\n            })\n        }\n    }\n}","export default {\n    savedData: JSON.parse(localStorage.getItem('savedData')) || {\n        advanchedPossibly: [1, 0, 0],\n        autoresolution: false,\n        //lastField: '',\n        //lastFieldFill: '',\n        solved: [\n            //'000000012000035000000600070700000300000400800100000000000120000080000040050000600', '000000012003600000000007000410020000000500300700000600280000040000300500000000000', '000000012008030000000000040120500000000004700060000000507000300000620000000100000', '000000012040050000000009000070600400000100000000000050000087500601000300200000000', '000000012050400000000000030700600400001000000000080000920000800000510700000003000', '000000012300000060000040000900000500000001070020000000000350400001400800060000000', '000000012400090000000000050070200000600000400000108000018000000000030700502000000',\n        ],\n        ignored: [\n            //'000000023480000000010000000503000060000010800000000000170000400000602000000300005','000000023600010000000400000000080700502000000000000100080203000010000640000500000','000000023600700000000000080000038500200000800000010000000200640003400000010000000','000000023800000050000100000010600400507030000000000000300052000064000100000000000','000000024000010000000000080107000900300800100000200000020400060500070300000000000','000000024000010000000000080307000100100800500000200000020400060500070300000000000','000000024000080010600005000000300700040700000010000000000040501300600000200000000','000000024007000000006000000500090100000300600020000000940000050000607300000800000','000000024010008000000070000600201500400000003000000000070000810500430000000000000',\n        ]\n    },\n    //autoresolution: false,\n    possiblyApdated: true,\n    // advanchedPossibly: {\n    //     onePossibly: false,\n    //     onlyHere: false\n    // },\n    field: false,\n    selectedStringField: '',\n    moveHistory: []\n}","const sudokuSquares = [\n    [0, 1, 2, 9, 10, 11, 18, 19, 20],\n    [3, 4, 5, 12, 13, 14, 21, 22, 23],\n    [6, 7, 8, 15, 16, 17, 24, 25, 26],\n    [27, 28, 29, 36, 37, 38, 45, 46, 47],\n    [30, 31, 32, 39, 40, 41, 48, 49, 50],\n    [33, 34, 35, 42, 43, 44, 51, 52, 53],\n    [54, 55, 56, 63, 64, 65, 72, 73, 74],\n    [57, 58, 59, 66, 67, 68, 75, 76, 77],\n    [60, 61, 62, 69, 70, 71, 78, 79, 80]\n]\nclass sudokuSolve {\n    constructor() {\n        this.repeat = true\n        this.option = new Set() //количество решений\n        this.possiblyends = 0\n        this.param = 0\n        this.advanchedPossibly = [1, 0, 0]\n        this.segments = [] //сегменты пока что для проверки\n    }\n    optionk() {\n        return this.option\n    }\n    setAdvanchedPossibly(parametr) {\n        this.advanchedPossibly = parametr\n    }\n    fieldInit(stringField) {\n        let a = []\n        for (let i = 0; i < stringField.length; i++) {\n            a.push({\n                id: i,\n                value: +stringField[i],\n                possibly: new Set()\n            })\n        }\n        this.cycleInint(a)\n        return a\n    }\n    cycleInint(field) {\n        field.forEach(item => {\n            if (item.value === 0) {\n                item.possibly = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9])\n            } else {\n                item.possibly.clear()\n            }\n        })\n        return\n    }\n    allPossubly(field) {\n        //console.log('allPossublystart');\n        //console.log(this.advanchedPossibly)\n        // let error = 0\n        //this.methods = data\n        this.cycleInint(field)\n        // if (cycle) {\n        //     this.cycleInint(field)\n        // }\n        //this.repeat = true\n        while (this.repeat) {\n            //console.log('1223');\n            // error= error + 1\n            this.segmentsSeparate(field)\n            //alert('123')\n        }\n        //console.log(field);\n        // setTimeout(()=>{\n        //     return  field\n        // },0)\n        // setTimeout(()=>{\n        //     this.possiblyend = true\n        // },0)\n        // this.possiblyends++\n        //console.log('allPossublyend');\n        return field\n    }\n    segmentsSeparate(field) {\n        this.repeat = false\n        this.segments=[]\n        for (let i = 0; i < 9; i++) {\n            let selectedrow = []\n            let selectedcolumn = []\n            let square = []\n            for (let j = 0; j < 9; j++) {\n                selectedrow.push(field[i * 9 + j])\n                selectedcolumn.push(field[i + j * 9])\n                square.push(field[sudokuSquares[i][j]])\n            }\n            //console.log(selectedrow);\n            this.segments.push(selectedrow)\n            this.segments.push(selectedcolumn)\n            this.segments.push(square)\n            // this.allPossublyInSegment(selectedrow)\n            // this.allPossublyInSegment(selectedcolumn)\n            // this.allPossublyInSegment(square)\n            //console.log(this.segments);\n        }\n        this.segments.forEach(item => {\n            if (this.advanchedPossibly[0]) {\n                this.existValue(item)\n            }\n            if (this.advanchedPossibly[1]) {\n                this.onlyHere(item)\n            }\n            if (this.advanchedPossibly[2]) {\n                this.onePossiblyDelete(item)\n            }\n            //this.allPossublyInSegment(item)\n        })\n        return\n    }\n    allPossublyInSegment(segment) {\n        if (this.advanchedPossibly[0]) {\n            this.existValue(segment)\n        }\n        if (this.advanchedPossibly[1]) {\n            this.onlyHere(segment)\n        }\n        if (this.advanchedPossibly[2]) {\n            this.onePossiblyDelete(segment)\n        }\n        return\n        // if (this.methods === 4) {\n        //     this.onlyHere(segment)\n        //     this.onePossiblyDelete(segment)\n        //     //console.log('123'); \n        // } else {\n        //     if (this.methods[0]) {\n        //         this.onlyHere(segment)\n        //     }\n        //     if (this.methods[1]) {\n        //         this.onePossiblyDelete(segment)\n        //     }\n        // }\n    }\n    existValue(segment) {\n        let segmentPossibly = new Set()\n        segment.forEach(item => {\n            if (item.value > 0) {\n                segmentPossibly.add(item.value)\n            }\n        })\n        segment.forEach(item => {\n            segmentPossibly.forEach(item2 => {\n                //this.repeat = true\n                if(item.possibly.delete(item2)) {\n                    this.repeat = true\n                }\n            })\n        })\n        return\n    }\n    onlyHere(segment) {\n        let possiblyes = []\n        segment.forEach(item => {\n                item.possibly.forEach(subitem => {\n                    possiblyes.push(subitem)\n                })\n        })\n        possiblyes = possiblyes.filter(value => {\n            if (possiblyes.indexOf(value) === possiblyes.lastIndexOf(value)) {\n                return value\n            }\n        })\n        possiblyes.forEach(number => {\n            segment.forEach(item => {\n                if (item.possibly.has(number) && item.possibly.size > 1) {\n                    this.repeat = true\n                    item.possibly.clear()\n                    item.possibly.add(number)\n                }\n            })\n        })\n        return\n    }\n    onePossiblyDelete(segment) {\n        segment.forEach(item => {\n            //let id = -100000\n            if (item.possibly.size === 1) {\n                let id = item.id\n                segment.forEach(subitem => {\n                    if (id !== subitem.id) {\n                        item.possibly.forEach(elem => {\n                            //this.repeat = true\n                            if (subitem.possibly.delete(elem)) {\n                                this.repeat = true\n                            }\n                            //subitem.possibly.delete(elem)\n                        })\n                    }\n\n                })\n            }\n        })\n        return\n    }\n    checkWin(field) {\n        let check = false\n        field.forEach(item => {\n            if (item.value > 0 && item.value < 10) {\n                check = true\n            }\n        })\n        return check\n    }\n    checkWinPossibly(field) {\n        //let check = field.every(item => item.value !== 0 || item.possibly.size === 1)\n        let check = true\n        field.forEach(item => {\n            if (item.value === 0 && item.possibly.size !== 1) {\n                check = false\n            }\n        })\n        // if(field[1].value === field[2].value) {\n        //     check = false\n        // }\n        //console.log(check);\n        return check\n        //return field.every(item => (item.value !== 0 & item.possibly.size === 1))\n    }\n    checkLose(field) {\n        let x = false\n        field.forEach(item => {\n            if (item.value === 0 && item.possibly.size === 0) {\n                x = true\n            }\n        })\n        // if (x) {\n        //     console.log(field); \n        // }\n        return x\n    }\n    checkWinPossiblyString(stringfield) {\n        this.advanchedPossibly = [1, 1, 1]\n        return this.checkWinPossibly(this.allPossubly(this.fieldInit(stringfield)))\n        //return false\n    }\n    setValue(field, id, value) {\n        //console.log('setValue')\n        if (field[id].possibly.has(value)) {\n            field[id].value = value\n            field[id].possibly.clear()\n        }\n        return this.allPossubly(field)\n    }\n    sudokuSolution(stringField) {\n        this.setAdvanchedPossibly([1,1,1])\n        this.option.clear()\n        //alert(this.checkWinPossiblyString(stringField))\n        //this.bulkhead(field, option)\n        //console.log(stringField);\n        // setTimeout(() => this.Bulkhead(stringField),10000)\n        //let x = 0\n        this.Bulkhead(stringField)\n        //.then(x++)\n        // if (x === 10) {\n        //     return this.option\n        // }\n        //setTimeout(() => {return this.option},10000)\n        // return new Promise(() => {\n\n        // })\n        return this.option\n\n    }\n    Bulkhead2(stringField) {\n        //console.log(stringField);\n        //let param = 0\n        // let xxx = 0\n        // while (xxx<100) {\n        //     xxx++\n        //     console.log(xxx);\n        // }\n        // console.log('xxx');\n        //перебор\n        //console.log('stringField');\n        //console.log(stringField);\n        //console.log('stringField')\n        //console.log(stringField)\n        //let snapshot = this.possiblyends + 1\n        //let times = 0\n        let field = this.fieldInit(stringField)\n        this.possiblyend = false\n        field = this.allPossubly(field, false)\n        //console.log(field);\n        // while (snapshot !== this.possiblyends) {\n        //     console.log('1');\n\n        //     //times++\n        // }\n        //this.possiblyends\n        //console.log(this.fieldInit(stringField))\n        //this.allPossubly(field)\n        //console.log('field')\n        //console.log(field)\n        //field = this.allPossubly(field)\n        //this.possiblyend.onchange = () => {\n        if (!this.checkLose(field) && this.option.size < 10) {\n            //console.log('1');\n            //this.checkWinPossibly(field)\n            if (this.checkWinPossibly(field)) {\n                let string = \"\"\n                field.forEach(item => {\n                    if (item.possibly.size === 1) {\n                        string += [...item.possibly][0]\n                    } else {\n                        string += item.value\n                    }\n                })\n                //console.log('1');\n                this.option.add(string)\n                //return data\n            } else {\n                //console.log('1')\n                //let item\n                //console.log('x');\n                //let item\n                // field.forEach(x => {\n                //     if (x.possibly.size > 1) {\n                //         item = x\n                //     }\n                // })\n                //console.log(field);\n                let item = field.find(x => x.possibly.size > 1 && x.value === 0)\n                //console.log(item);\n                // item = field.find(x => {\n                //      if (x.value === 0 && x.possibly.size > 1) {\n                //        return x\n                //      }\n                // })\n                //console.log('item');\n                //console.log(field);\n                //JSON.parse(JSON.stringify(obj))\n                // let litle = []\n                // item.possibly.forEach(x => {\n                //     litle.push(x)\n                // })\n                // console.log(litle);\n                //let litle = JSON.parse(JSON.stringify([...item.possibly]))\n                item.possibly.forEach(subitem => {\n                    //if (item.possibly.has(subitem)) {\n                    //console.log(item)\n                    let litle = {}\n                    litle.q1 = []\n                    item.possibly.forEach(x => {\n                        litle.q1.push(x)\n                    })\n                    litle.q2 = item.id\n                    // console.log(litle);\n                    // console.log('subitem',subitem);\n                    //this.setValue(field,item.id,subitem)\n                    // if (item.possibly.has(subitem)) {\n                    //     item.value = subitem\n                    // }\n                    let string = \"\"\n                    field.forEach(item1 => {\n                        if (item.id !== item1.id) {\n                            string = string + item1.value\n                        } else {\n                            string = string + subitem\n                        }\n                    })\n                    //string[item.id] = subitem\n                    //setTimeout(() => this.Bulkhead(string), 100)\n                    // console.log(string);\n                    // console.log(field);\n                    if (this.param < 1) {\n                        this.Bulkhead(string)\n                        this.param++\n                        //console.log('Bulkhead');\n                    }\n                    //this.Bulkhead(string)\n                })\n            }\n        }\n\n    }\n    Bulkhead(stringField) {\n        let field = this.allPossubly(this.fieldInit(stringField))\n        //console.log(field);\n        if (this.checkWinPossibly(field)) {\n            //console.log('123');\n            let str = ''\n            field.forEach(item => {\n                if (item.value > 0) {\n                    str = str + item.value\n                } else {\n                    str = str + [...item.possibly][0]\n                }\n            })\n            //console.log('123');\n            //let q = '' + str\n            //console.log(q);\n            //console.log(q.length);\n            this.option.add(str)\n            //console.log('12321');\n        } else {\n            if (!this.checkLose(field)) {\n            //console.log('123');\n            let button = field.find(item => item.possibly.size > 1)\n            //console.log(field);\n            button.possibly.forEach(item => {\n                let str = ''\n                field.forEach(item2 => {\n                    if (item2.id === button.id) {\n                        str = str + item\n                    } else {\n                        str = str + item2.value\n                    }\n                })\n                //console.log(str);\n                //console.log(str.length);\n                if (this.option.size < 10) {\n                    this.Bulkhead(str)\n                }\n            })\n        }\n        }\n    }\n    newField() {\n        this.setAdvanchedPossibly([1,1,1])\n        let stringField = ''\n        //let base = '000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n        //let field = new String('000000000000000000000000000000000000000000000000000000000000000000000000000000000')\n        // '000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n        let field = this.fieldInit('000000000000000000000000000000000000000000000000000000000000000000000000000000000')\n        let count = 0\n        let check = true\n        let succes = true\n\n        while ((count <16 || check) && succes ) {\n            //count++\n            let place = Math.floor(Math.random() * (81))\n            let value = Math.floor(Math.random() * (8)) + 1\n            if(field[place].possibly.has(value) && field[place].value === 0 )\n            {\n                count++\n                field[place].value = value\n                field[place].possibly.clear()\n                this.allPossubly(field)\n            }\n            if (count>16) {\n                //alert('123')\n                let str = ''\n                field.forEach((item)=> {\n                    str +=item.value\n                })\n                if (this.sudokuSolution(str).size === 0) {\n                    succes = false\n                }\n                if (this.sudokuSolution(str).size === 1) {\n                    check = false\n                }\n            }\n            \n        }\n        if (succes) {\n        field.forEach((item)=> {\n            stringField +=item.value\n        })\n        console.log(this.sudokuSolution(stringField));\n        //this.sudokuSolution(stringField)\n        //console.log(stringField);\n        return stringField\n        } else {\n            console.log('fail try again');\n            return false\n            //this.newField()\n        }\n    }\n}\nexport default {\n    sudokuSolve\n}","import methods from './sudoku'\nexport default {\n    SET_PERSONAL_DATA(state) {\n        //console.log('save');\n        localStorage.setItem('savedData', JSON.stringify(state.savedData))\n    },\n    NEW_FIELD () {\n        // let x = new methods.sudokuSolve\n        // let stringField = x.newField()\n    },\n    // GET_PERSONAL_DATA(state) {\n    //     console.log('GET_PERSONAL_DATA');\n    //     state.savedData = JSON.parse(localStorage.getItem('savedData')) || {\n    //         advanchedPossibly: [1, 0, 0],\n    //         //lastField: '',\n    //         //lastFieldFill: '',\n    //         solved: [\n    //             //'000000012000035000000600070700000300000400800100000000000120000080000040050000600', '000000012003600000000007000410020000000500300700000600280000040000300500000000000', '000000012008030000000000040120500000000004700060000000507000300000620000000100000', '000000012040050000000009000070600400000100000000000050000087500601000300200000000', '000000012050400000000000030700600400001000000000080000920000800000510700000003000', '000000012300000060000040000900000500000001070020000000000350400001400800060000000', '000000012400090000000000050070200000600000400000108000018000000000030700502000000',\n    //         ],\n    //         ignored: [\n    //             //'000000023480000000010000000503000060000010800000000000170000400000602000000300005','000000023600010000000400000000080700502000000000000100080203000010000640000500000','000000023600700000000000080000038500200000800000010000000200640003400000010000000','000000023800000050000100000010600400507030000000000000300052000064000100000000000','000000024000010000000000080107000900300800100000200000020400060500070300000000000','000000024000010000000000080307000100100800500000200000020400060500070300000000000','000000024000080010600005000000300700040700000010000000000040501300600000200000000','000000024007000000006000000500090100000300600020000000940000050000607300000800000','000000024010008000000070000600201500400000003000000000070000810500430000000000000',\n    //         ]\n    //     }\n    //     console.log(state.savedData.advanchedPossibly);\n    // },\n    INITIALIZATION(state, stringField) {\n        state.selectedStringField = stringField\n        //state.autoresolution = false\n        let x = new methods.sudokuSolve\n        state.field = x.fieldInit(stringField)\n    },\n    ONE_POSSIBLY_SWITCH(state) {\n        //state.savedData.advanchedPossibly[1] = !state.savedData.advanchedPossibly[1]\n        //console.log('1');\n        //console.log(state.savedData.advanchedPossibly);\n        state.savedData.advanchedPossibly.splice(1,1,!state.savedData.advanchedPossibly[1])\n    },\n    ONLY_HERE_SWITCH(state) {\n        //state.savedData.advanchedPossibly[2] = !state.savedData.advanchedPossibly[2]\n        state.savedData.advanchedPossibly.splice(2,1,!state.savedData.advanchedPossibly[2])\n    },\n    POSSIBLY_APDATE(state) {\n        state.possiblyApdated = !state.possiblyApdated\n    },\n    AUTO_RESOLUTIONS(state) {\n        state.savedData.autoresolution = !state.savedData.autoresolution\n    },\n    EXIST_VALUE(state, field) {\n        let x = new methods.sudokuSolve\n        //console.log(state.savedData);\n        x.setAdvanchedPossibly([\n            1,\n            state.savedData.advanchedPossibly[1],\n            state.savedData.advanchedPossibly[2],\n        ])\n        //console.log(state.savedData.advanchedPossibly);\n        state.field = x.allPossubly(field)\n    },\n    SET_FIELD_VALUE(state, payload) {\n        if (!payload.unsave) {\n            state.moveHistory.push({\n                buttonid: payload.target,\n                exvalue: state.field.find(item => item.id === payload.target).value\n            })\n        }\n        state.field.find(item => item.id === payload.target).value = payload.value\n        state.field.find(item => item.id === payload.target).possibly.clear()\n\n    },\n    CYCLE_INIT(state) {\n        state.field.forEach(item => {\n            if (item.value === 0) {\n                item.possibly = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9])\n            }\n        })\n    },\n    ALL_POSSIBLY(state, segment) {\n        //console.log(segment);\n        let segmentPossibly = new Set()\n        segment.forEach(item => {\n            if (item.value !== 0) {\n                segmentPossibly.add(item.value)\n            }\n            //console.log(item.value);\n        })\n        segment.forEach(item => {\n            segmentPossibly.forEach(item2 => {\n                item.possibly.delete(item2)\n            })\n        })\n    },\n}","export default {\n    field: state =>  state.field,\n    autoresolution: state =>  state.savedData.autoresolution,\n    //advanchedPossibly: state => state.advanchedPossibly,\n    savedData: state => state.savedData,\n    // advanchedPossibly: state => (n) => {\n    //     return state.savedData.advanchedPossibly[n]\n    // },\n    advanchedPossibly: state => state.savedData.advanchedPossibly\n}\n","import actions from \"./actions\";\nimport state from \"./state\";\nimport mutations from \"./mutations\"\nimport getters from \"./getters\"\n// import sudokuFront from \"./sudokuFront\"\nexport default {\n    namespaced: true,\n    state,\n    mutations,\n    getters,\n    actions,\n    // modules: {\n    //     front: {\n    //         ...sudokuFront\n    //     },\n    // }\n}\n","import Vue from 'vue'\nimport Vuex from 'vuex'\nimport dataManage from './dataManage'\n// import testMod from './testMod'\nimport sudoku from './sudoku'\n// import example from './module-example'\n// import SudokuMethods from './getData/SudokuMethods'\n\nVue.use(Vuex);\n\nexport default function() {\n  return new Vuex.Store({\n    modules: {\n      dataManage,\n      // testMod,\n      sudoku\n      // example\n      // SudokuMethods\n    }\n  })\n}\n","/* eslint-disable no-console */\n\nimport { register } from 'register-service-worker'\n\nif (process.env.NODE_ENV === 'production') {\n  register(`${process.env.BASE_URL}service-worker.js`, {\n    ready () {\n      console.log(\n        'App is being served from cache by a service worker.\\n' +\n        'For more details, visit https://goo.gl/AFskqB'\n      )\n    },\n    registered () {\n      console.log('Service worker has been registered.')\n      //register.update()\n    },\n    cached () {\n      console.log('Content has been cached for offline use.')\n    },\n    updatefound () {\n      console.log('New content is downloading.')\n    },\n    updated () {\n      console.log('New content is available; please refresh.')\n      // let update = confirm(\"update the app now?\");\n      // if(update) {\n      //   window.location.reload(true)\n      // }\n      // localStorage.removeItem('viewSettings')\n      // localStorage.clear()\n      window.location.reload()\n      // caches.keys().then(function(names) {\n      //   for (let name of names) caches.delete(name);\n      // });\n    },\n    offline () {\n      console.log('No internet connection found. App is running in offline mode.')\n    },\n    error (error) {\n      console.error('Error during service worker registration:', error)\n    }\n  })\n}\n","import Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\nimport './registerServiceWorker'\n\nVue.config.productionTip = false\n\nnew Vue({\n  router,\n  store,\n  render: h => h(App)\n}).$mount('#app')\n","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=scss&\"","import Vue from 'vue'\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter);\n\nconst routes = [\n  // {path: '/', name: 'app', component: () => import('../App.vue')},\n  {path: '/', name: 'Sudoku', component: () => import('../views/Sudoku.vue')},\n  {path: '/Auth', name: 'Auth', component: () => import('../views/Auth.vue')},\n  {path: '/Home', name: 'Home', component: () => import('../views/Home.vue')},\n  {path: '/LeaderBoard', name: 'LeaderBoard', component: () => import('../views/LeaderBoard.vue')},\n  {path: '/About', name: 'About', component: () => import('../views/About.vue')},\n  // {path: '/Sudoku', name: 'SudokuHome', component: () => import('../views/Home.vue')},\n  {path: '*', component: () => import('../views/Home.vue')}\n];\n// if (process.env.MODE !== 'ssr') {\n//   routes.push({\n//     path: '*',\n//     component: () => import('../views/Home.vue')\n//   })\n// }\n\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\n\nexport default router\n"],"sourceRoot":""}